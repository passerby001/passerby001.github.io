<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dr. Evil Underscores</title>
      <link href="/2020/04/01/Dr.%20Evil%20Underscores/"/>
      <url>/2020/04/01/Dr.%20Evil%20Underscores/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：Dr-Evil-Underscores"><a href="#题目：Dr-Evil-Underscores" class="headerlink" title="题目：Dr. Evil Underscores"></a><a href="https://codeforces.com/contest/1285/problem/D" target="_blank" rel="noopener">题目：Dr. Evil Underscores</a></h1><p><strong><center>D. Dr. Evil Underscores</center></strong></p><center> time limit per test：1 second<center>memory limit per test：256 megabytes<center>inputstandard input<center>outputstandard output<p>Today, as a friendship gift, Bakry gave Badawy n integers a1,a2,…,an and challenged him to choose an integer X such that the value max1≤i≤n(ai⊕X) is minimum possible, where ⊕ denotes the bitwise XOR operation.</p><p>As always, Badawy is too lazy, so you decided to help him and find the minimum possible value of max1≤i≤n(ai⊕X).</p><p><strong>Input</strong><br>The first line contains integer n (1≤n≤105).<br>The second line contains n integers a1,a2,…,an (0≤ai≤230−1).</p><p><strong>Output</strong><br>Print one integer — the minimum possible value of max1≤i≤n(ai⊕X).</p><p><strong>input</strong></p><pre><code>31 2 3</code></pre><p><strong>output</strong></p><pre><code>2</code></pre><p><strong>input</strong></p><pre><code>21 5</code></pre><p><strong>output</strong></p><pre><code>4</code></pre><p><strong>Note</strong><br>In the first sample, we can choose X=3.<br>In the second sample, we can choose X=5.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你n个数，让你寻找一个X，使X异或这n个数的<strong>最大值尽可能的要小</strong>。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>第一题写这个题感觉还挺有意思的，仔细想了想<del>查了查博客</del>终于明白了，既然是位运算那肯定和二进制有关，把每个数据都按二进制去思考，<strong>如果这些数某个二进制位置上的数既有0又有1，那么不论取值X的二进制位置上对应的位置上是0还是1，这个位置上异或后的值一定是1！</strong>所以，我们每次统计一下，如果这个位置既有0又有1，那么这个位置异或后肯定是1，<strong>如果这个位置上的数据相同</strong>，那么我们就不用管它，<strong>让这个位置上的值为0</strong>，就好了<del>最大值尽可能的小</del>；然后我们这样每次按位处理，最多30次就可以处理完！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ve<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ve<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归到头了，没有数据了；直接返回就可以 </span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//区分给位置的数值  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">:</span>ve<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是 1 就放进 l 里面 </span>        <span class="token keyword">else</span> r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0就放进 r里面； </span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>x<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左边为空说明这个位置都是 1 ，直接处理右边 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">solve</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>x<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边为空说明这个位置都是 0 ，直接处理左边 </span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>x<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">solve</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>x<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为是要最小值，所以让最小的加上  </span><span class="token punctuation">}</span>                                    <span class="token comment" spellcheck="true">//二进制该位置唯一的十进制数（类似进制转换）        </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">solve</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D. Minimax Problem</title>
      <link href="/2020/04/01/D.%20Minimax%20Problem/"/>
      <url>/2020/04/01/D.%20Minimax%20Problem/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接：D-Minimax-Problem"><a href="#题目链接：D-Minimax-Problem" class="headerlink" title="题目链接：D. Minimax Problem"></a><a href="https://codeforces.com/contest/1288/problem/D" target="_blank" rel="noopener">题目链接：D. Minimax Problem</a></h1><center>time limit per test:5 seconds<center>memory limit per test:512 megabytes<center>inputstandard input<center>outputstandard output<p>You are given n arrays a<del>1</del>, a<del>2</del>, …, a<del>n</del>; each array consists of exactly m integers. We denote the y-th element of the x-th array as a<del>x,y</del>.</p><p>You have to choose two arrays a<del>i</del> and a<del>j</del>(1≤i,j≤n, it is possible that i=j). After that, you will obtain a new array b consisting of m integers, such that for every k∈[1,m] b<del>k</del>=max(a<del>i,k</del>,a<del>j,k</del>).</p><p>Your goal is to choose i and j so that the value of $\sum_{k=1}^m$b<del>k</del>  is maximum possible.</p><p><strong>Input</strong><br>The first line contains two integers n and m (1≤n≤3⋅105, 1≤m≤8) — the number of arrays and the number of elements in each array, respectively.</p><p>Then n lines follow, the x-th line contains the array ax represented by m integers a<del>x,1</del>, a<del>x,2</del>, …, a<del>x,m</del> (0≤a<del>x,y</del>≤10^9^).</p><p><strong>Output</strong><br>Print two integers i and j (1≤i,j≤n, it is possible that i=j) — the indices of the two arrays you have to choose so that the value of $\sum_{k=1}^m$b<del>k</del> is maximum possible. If there are multiple answers, print any of them.</p><p>Example<br><strong>input</strong></p><pre><code>6 55 0 3 1 21 8 9 1 31 2 3 4 59 1 0 3 72 3 0 6 36 4 1 7 0</code></pre><p><strong>output</strong></p><pre><code>1 5</code></pre><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你两个数，n和m，表示n个数组每个数组有m个元素，然后让你<strong>输出任意两个数组合并后数组中的最小值最大是几</strong>，合并的规则是两个数组的同一个位置取最大值，比如：1 2 3 4 5   和 5 4 3 2 1这两个数列合并后的值为 5 4 3 4 5；最小值时3；</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>既然是求最小值最大，那么很容易想到二分，但是<strong>我们该如何check呢？</strong>当行很大，列很小的时候很容易想到状压，但是<strong>如何表示状态呢？</strong>，既然是两个数列合并后的最小值都要大于二分的 mid，所以用二进制来表示每个数列满足要求的状态，比如说一共4个数 现在需要合并后的值大于等于3 两个数列是 <strong>1 3 4 1 那么这个数列满足大于等于3的值可以用6表示<del>（第2位和第3位大于等于三，也就是二进制的第二位和第三位唯一，结果是6）</del>，</strong>另一个是4 1 3 4 状态表示为11，然后<strong>6|11等于列数4</strong>所以可以，如果不等那就不成立，现在我们check和二分都有了，就可以码代码了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">500000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存图 </span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断这个状态是否成立 </span><span class="token keyword">int</span> ans_pos<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示这个成立这个状态是第几行 </span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> ans1<span class="token punctuation">,</span>ans2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录成立的两个状态 </span>bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次初始化状态数组 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录状态 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//这里的 位运算 | 简化了相互的加法，不懂得自己模拟一遍 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>x<span class="token punctuation">)</span> t<span class="token operator">|</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// j的第几个元素满足情况，第几位为 1 </span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个状态存在，就唯一； </span>        ans_pos<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录这个状态是第几行； </span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一共 m 列如果都是 1 那么 二进制就是 m 个1 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果这个状态为0，说明不存在 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">|</span>j<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果 两个位置 或 后等于k，那么说明情况合法 </span>            <span class="token punctuation">{</span>                ans1<span class="token operator">=</span>ans_pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ans1 ans2 满足此状态的两行行数 </span>                ans2<span class="token operator">=</span>ans_pos<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// </span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//二分模板写法 </span>    <span class="token punctuation">{</span>        mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans1<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans2<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C. NEKO&#39;s Maze Game</title>
      <link href="/2020/04/01/C.%20NEKO&#39;s%20Maze%20Game/"/>
      <url>/2020/04/01/C.%20NEKO&#39;s%20Maze%20Game/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接：-C-NEKO’s-Maze-Game"><a href="#题目链接：-C-NEKO’s-Maze-Game" class="headerlink" title="题目链接： C. NEKO’s Maze Game"></a><a href="https://codeforces.com/contest/1293/problem/C" target="_blank" rel="noopener">题目链接： C. NEKO’s Maze Game</a></h1><center>time limit per test:1.5 seconds<center>memory limit per test:256 megabytes<center>inputstandard input<center>outputstandard output<p>NEKO#ΦωΦ has just got a new maze game on her PC!</p><p>The game’s main puzzle is a maze, in the forms of a 2×n rectangle grid. NEKO’s task is to lead a Nekomimi girl from cell (1,1) to the gate at (2,n) and escape the maze. The girl can only move between cells sharing a common side.</p><p>However, at some moments during the game, some cells may change their state: either from normal ground to lava (which forbids movement into that cell), or vice versa (which makes that cell passable again). Initially all cells are of the ground type.</p><p>After hours of streaming, NEKO finally figured out there are only q such moments: the i-th moment toggles the state of cell (r<del>i</del>,c<del>i</del>) (either from ground to lava or vice versa).</p><p>Knowing this, NEKO wonders, after each of the q moments, whether it is still possible to move from cell (1,1) to cell (2,n) without going through any lava cells.</p><p>Although NEKO is a great streamer and gamer, she still can’t get through quizzes and problems requiring large amount of Brain Power. Can you help her?</p><p><strong>Input</strong><br>The first line contains integers n, q (2≤n≤10^5^, 1≤q≤10^5^).</p><p>The i-th of q following lines contains two integers ri, ci (1≤r<del>i</del>≤2, 1≤c<del>i</del>≤n), denoting the coordinates of the cell to be flipped at the i-th moment.</p><p>It is guaranteed that cells (1,1) and (2,n) never appear in the query list.</p><p><strong>Output</strong><br>For each moment, if it is possible to travel from cell (1,1) to cell (2,n), print “Yes”, otherwise print “No”. There should be exactly q answers, one after every update.<br>You can print the words in any case (either lowercase, uppercase or mixed).</p><p><strong>input</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token number">5</span> <span class="token number">5</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">4</span></code></pre><p><strong>output</strong></p><pre class=" language-cpp"><code class="language-cpp">YesNoNoNoYes</code></pre><p><strong>Note</strong><br>We’ll crack down the example test here:</p><p>After the first query, the girl still able to reach the goal. One of the shortest path ways should be: (1,1)→(1,2)→(1,3)→(1,4)→(1,5)→(2,5).<br>After the second query, it’s impossible to move to the goal, since the farthest cell she could reach is (1,3).<br>After the fourth query, the (2,3) is not blocked, but now all the 4-th column is blocked, so she still can’t reach the goal.<br>After the fifth query, the column barrier has been lifted, thus she can go to the final goal again.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个2xN的表格，一共有q次查询，每次查询前会有一个表格变成岩浆不能走，或者从岩浆变回了可以总，问你能否从1 1这个表格走到2 n这个位置，可以的话就输出“Yse”，否则就是“No”；</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>表格的变换我们可以用位运算 <strong>异或</strong> 来处理，问题是我们怎么判断这次变化后是否可行呢？经过画图的多次尝试，我们发现如果这次不行，那么肯定至少有一列都是岩浆或者至少有一个对角线的位置是岩浆，因此我们可以运用类似前缀和的思想，每次统计以变化<strong>位置为中心的连着三个对立位置</strong>，<strong>如果该位置是岩浆，就统计对面三个位置有几个熔浆，如果是可以走，那就减去前面位置有几块熔浆</strong>如果结果为零那说明可以走，因为没有一块岩浆，如果不唯一就不行，这里为什么呢？<strong>你想呀，如果你这个位置查询的时候是0，可以走的说明什么？说明之前他是1不能走，既然之前不能走，那之前的ans肯定包含不能走时的转态，如果上一次这三个位置都是0，ans加的是0，这次减得也是零对结果没影响，如果上次这三个位置是1呢？说明上次ans加了三个1，这次刚好减去</strong>这里很巧妙的运用了位运算和前缀和的思想，真的太巧了，膜拜大神们呀！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> q<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>        x<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x--,方便以后的 ^ 运算 </span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变这个位置的状态 </span>        <span class="token keyword">int</span> m<span class="token operator">=</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是 0 就是可以走，那结果就要减，1的话加 </span>        ans<span class="token operator">+</span><span class="token operator">=</span>m<span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>x<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>x<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行ans的累加 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D. Same GCDs</title>
      <link href="/2020/04/01/D.%20Same%20GCDs/"/>
      <url>/2020/04/01/D.%20Same%20GCDs/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接：D-Same-GCDs"><a href="#题目链接：D-Same-GCDs" class="headerlink" title="题目链接：D. Same GCDs"></a><a href="https://codeforces.com/contest/1295/problem/D" target="_blank" rel="noopener">题目链接：D. Same GCDs</a></h1><center>time limit per test:2 seconds <center>memory limit per test:256 megabytes<center>inputstandard input<center>outputstandard output<p>You are given two integers a and m. Calculate the number of integers x such that 0≤x&lt;m and gcd(a,m)=gcd(a+x,m).<br>Note: gcd(a,b) is the greatest common divisor of a and b.<br><strong>Input</strong><br>The first line contains the single integer T (1≤T≤50) — the number of test cases.<br>Next T lines contain test cases — one per line. Each line contains two integers a and m (1≤a&lt;m≤1010).<br><strong>Output</strong><br>Print T integers — one per test case. For each test case print the number of appropriate x-s.<br><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span><span class="token number">4</span> <span class="token number">9</span><span class="token number">5</span> <span class="token number">10</span><span class="token number">42</span> <span class="token number">9999999967</span></code></pre><p><strong>output</strong></p><pre class=" language-py"><code class="language-py">619999999966</code></pre><p><strong>Note</strong><br>In the first test case appropriate x-s are [0,1,3,4,6,7].<br>In the second test case the only appropriate x is 0.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你两个数 a，m。从[a，a+m)中取出任意一个数x，使得gcd(x,m)=gcd(a,m)成立，问你这样的的x的个数一共有几个。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们设 p=gcd(a,m); 则p=gcd(x,m);然后同时除以p得1=gcd(x/p,m/p);这时候我们发现其实要求的的也就是[a/p,a/p+m/p)中与m/p互质的数有几个。同时减去a/p的，也就是[1,m/p)中于m/p互质的的个数，直接用欧拉函数就可以了；</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    ll a<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token operator">>></span>m<span class="token punctuation">;</span>        ll p<span class="token operator">=</span><span class="token function">__gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        ll ans<span class="token operator">=</span>m<span class="token operator">/</span>p<span class="token punctuation">;</span>        ll q<span class="token operator">=</span>ans<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//欧拉函数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">-</span>ans<span class="token operator">/</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> q<span class="token operator">/</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">-</span><span class="token operator">=</span>ans<span class="token operator">/</span>q<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E. Permutation Separation</title>
      <link href="/2020/04/01/E.%20Permutation%20Separation/"/>
      <url>/2020/04/01/E.%20Permutation%20Separation/</url>
      
        <content type="html"><![CDATA[<h1 id="E-Permutation-Separation"><a href="#E-Permutation-Separation" class="headerlink" title="E. Permutation Separation"></a><a href="https://codeforces.com/contest/1295/problem/E" target="_blank" rel="noopener">E. Permutation Separation</a></h1><center>E. Permutation Separation<center>time limit per test：2 seconds<center>memory limit per test：256 megabytes<center>inputstandard input<center>outputstandard output<p>&emsp;You are given a permutation p1,p2,…,pn (an array where each integer from 1 to n appears exactly once). The weight of the i-th element of this permutation is ai.<br>&emsp;At first, you separate your permutation into two non-empty sets — prefix and suffix. More formally, the first set contains elements p1,p2,…,pk, the second — pk+1,pk+2,…,pn, where 1≤k&lt;n.<br>&emsp;After that, you may move elements between sets. The operation you are allowed to do is to choose some element of the first set and move it to the second set, or vice versa (move from the second set to the first). You have to pay ai dollars to move the element pi.<br>&emsp;Your goal is to make it so that each element of the first set is less than each element of the second set. Note that if one of the sets is empty, this condition is met.<br>&emsp;For example, if p=[3,1,2] and a=[7,1,4], then the optimal strategy is: separate p into two parts [3,1] and [2] and then move the 2-element into first set (it costs 4). And if p=[3,5,1,6,2,4], a=[9,1,9,9,1,9], then the optimal strategy is: separate p into two parts [3,5,1] and [6,2,4], and then move the 2-element into first set (it costs 1), and 5-element into second set (it also costs 1).<br>Calculate the minimum number of dollars you have to spend.</p><p><strong>Input</strong><br>The first line contains one integer n (2≤n≤2⋅10^5^) — the length of permutation.<br>The second line contains n integers p1,p2,…,pn (1≤pi≤n). It’s guaranteed that this sequence contains each element from 1 to n exactly once.<br>The third line contains n integers a1,a2,…,an (1≤ai≤10^9^).<br><strong>Output</strong><br>Print one integer — the minimum number of dollars you have to spend.</p><p>Examples<br><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span><span class="token number">7</span> <span class="token number">1</span> <span class="token number">4</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">4</span></code></pre><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">4</span><span class="token number">2</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">3</span><span class="token number">5</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">3</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span></code></pre><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">6</span><span class="token number">3</span> <span class="token number">5</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">4</span><span class="token number">9</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">9</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">2</span></code></pre><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个数 n ，然后有n个数，给个数对应一个权值a<del>i</del>，然后让你将这n个数分成<strong>两个空的几何</strong>，通过移动两个几何中的元素，使得最终的左侧几何的数<strong>全部小于</strong>右侧几何的数，有个<strong>特殊情况：</strong> 如果移动到最后一个几何为空，那么也成立。移动每一个元素时都要加上对应的权值，问你是如何移动使得花费最小。 比如说第一个样例 3 1 2 这三个数分别对应的权值是 7 1 4，我们可以选择将几何这个序列分成两部分，【3，1】，【2】，这样的话，将2移动到前那个几何中就可以花费为 4且代价最少。 </p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这题我们可以考虑把前K个数里面的比K大的数都移动到K后面，K后面比K小的数都移动到K前面，但是如果直接这样写是N^2^的复杂度，这时候我们就要想想可以用什么来优化下了，我们可以模拟先来一遍 就第一个样例吧，刚开始是 3 5 1 6 2 4，对应的权值为9 1 9 9 1 9；假设这时候我们考虑把前k个数全部移动到后面的花费 分别是 9 10 19 28 29  9<del>（对于最后一个数，我们可以考虑，把他向前一个移动）</del><br><strong>这是我们发现其实对于前K个数而言，只要其小于等于K，就不用移动，对于K后面的数如果大于K就不用移动</strong>，这时候我们该如何优化呢，如果数字 i 的位置在 i 之前，那么 i 位置后面的前缀和要减去 i 的权值，但是要向前去移动，再算前缀和的时候，它前面的数值没有加上他，所以从数字 i 的 位置之前的前缀和都要加上 i 的权值，从 i 的位置开始以后的前缀和都要减去 i 的权值；这样我们就可以线性的跑一遍数列并且以 log 级别的进行计算。<br>例如：<br>的后  【3 5 1 6 2 4】<br> <strong>k=1时：</strong><br>1前面的数字都要加上1的权值，后面的减去1的权值。<br> <strong>k=2时：</strong><br>2前面的数字都要加上2的权值，后面的减去2的权值。这时候可以发现，2这个位置的前缀和刚好只有3 5 6，这几个数值的权值和，<br> <strong>k=3时：</strong><br>3前面的数字都要加上3的权值，后面的减去3的权值，这时候3这个位置的前缀和变成了 1，2这两个数值的前缀和，并且1这个位置的前缀和变成了2 和5 的权值和了。<br>后面的也类似就不一一举例了。<br><strong>线段树本菜鸡也是刚刚学，还请大佬们多多指导。。。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token number">200015</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span>ll sum<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">,</span>pos<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    ll mi<span class="token punctuation">,</span>lazy<span class="token punctuation">;</span><span class="token punctuation">}</span> tree<span class="token punctuation">[</span>mx<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token operator">=</span>sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push_down</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token operator">+</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span>ll k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>ql<span class="token operator">||</span>l<span class="token operator">></span>qr<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>ql<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span><span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>lazy<span class="token operator">+</span><span class="token operator">=</span>k<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token operator">+</span><span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">push_down</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">,</span>tree<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pos<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录a[i]的位置</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算前缀和</span>    <span class="token punctuation">}</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建树建到 n-1；</span>    ll ans<span class="token operator">=</span>tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//考虑将最后一个数移动到前面花费最小；</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个位置之前的数都要加上i的权值</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">,</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span>b<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个位置开始以后的数值都要减去i的权值</span>        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次更新最小的情况</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></center></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛牛的Link Power II</title>
      <link href="/2020/04/01/%E7%89%9B%E7%89%9B%E7%9A%84Link%20Power%20II/"/>
      <url>/2020/04/01/%E7%89%9B%E7%89%9B%E7%9A%84Link%20Power%20II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接：牛牛的Link-Power-II"><a href="#题目链接：牛牛的Link-Power-II" class="headerlink" title="题目链接：牛牛的Link Power II"></a><a href="https://ac.nowcoder.com/acm/contest/3004/G" target="_blank" rel="noopener">题目链接：牛牛的Link Power II</a></h1><p>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 262144K，其他语言524288K<br>64bit IO Format: %lld<br><strong>题目描述</strong><br>牛牛有一颗大小为n的神奇Link-Cut 数组，数组上的每一个节点都有两种状态，一种为link状态，另一种为cut状态。数组上任意一对处于link状态的无序点对（即(u,v)和(v,u)被认为是同一对）会产生dis(u,v)的link能量，dis(u,v)为数组上u到v的距离。</p><p>我们定义整个数组的Link能量为所有处于link状态的节点产生的link能量之和。</p><p>一开始数组上每个节点的状态将由一个长度大小为n的01串给出，’1’ 表示Link状态，’0’ 表示Cut状态。</p><p>牛牛想要知道一开始，以及每次操作之后整个数组的Link能量，为了避免这个数字过于庞大，你只用输出答案对10^9^+7取余后的结果即可。</p><p>输入描述:<br>第一行输入一个正整数 n (1≤n≤10^5^)<br>接下里一行输入一个长度大小为n的01串表示数组的初始状态，’1’表示Link状态，’0’表示Cut状态。<br>接下来一行输入一个正整数m(1≤m≤10^5^)  表示操作的数目<br>接下来m行，每行输入两个正整数q,pos(q∈{1,2},1≤pos≤n)<br>当q=1时表示牛牛对数组的第pos个元素进行操作，将其赋值为1，保证在这个操作之前，该元素的值为0。<br>当q=2时表示牛牛对数组的第pos个元素进行操作，将其赋值为0，保证在这个操作之前，该元素的值为1。<br>输出描述:<br>请输出m+1行表示一开始，以及每次操作之后整个数组的Link能量，为了避免这个数字过于庞大，你只用输出答案对10^9^+7取余后的结果即可。<br>示例1<br>输入</p><pre class=" language-c"><code class="language-c"><span class="token number">5</span><span class="token number">00001</span><span class="token number">7</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">5</span><span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span></code></pre><p>输出</p><pre class=" language-c"><code class="language-c"><span class="token number">0</span><span class="token number">4</span><span class="token number">0</span><span class="token number">0</span><span class="token number">0</span><span class="token number">2</span><span class="token number">4</span><span class="token number">10</span></code></pre><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个n，然后有一个长度为 n 的01字符串，问你任意两个1之间的距离之和；比如说111这三个 1 吧，输出结果就是 4，然后给你一个数 m 有m次操作每次操作有两个数 x，y。<br>x=1 就把位置为y的值变成1，然后输出所有的1的距离之和<br>x=2 就把位置为y的值变成0，然后输出所有的1的距离之和</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个很明显的需要用线段树或树状数组去求解，这里我就用树状数组来讲解。我们很容易发如果给你一个序列，比如是 100101；这个01串，如果把第3个位置变成1，那么更变后多产生了多少值呢？产生了（1,3），（3,4），（3,6）；这三段；如果把第5个位置变成1呢？那么多产生的就是（1,5），（4,5），（5,6）；我们发现当我们插入值得时候，只会产生新的对数，对于之前的距离和不会改变，我们只需要吧之前的加上现在新增的就可以了。<br>如何求新增的呢？这里设插入位置为 y ，通过上面俩次模拟我么发现一个公式 新增加的数量就是<strong>y前面1的数量乘以y减去y前面的前缀和 再加上 y以后的后缀和减去 y乘以y后面1的数量</strong>；这里的后缀和就是位置唯一的值之和，比如说11011，前缀和sum<del>5</del>=1+2+4+5；这时候我们只需要维护一个前缀和就可以了。<br><strong>！！！！！更重要的是记得最后加mod再次进行取模！！！！！</strong>不要问我为啥这么激动。。。。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll sc<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存1的数量的前缀和 </span>ll sm<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存 值为1的坐标的前缀和 </span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll k<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果 k 小于 0的时候表示把1变成0需要减  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">;</span>        sm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>sm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">sum_c</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求前面 1 数量的前缀和 </span><span class="token punctuation">{</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span>ans<span class="token operator">+</span>sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">}</span>ll <span class="token function">sum_s</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//求 值为1的坐标的前缀和</span><span class="token punctuation">{</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>sm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新两个前缀和 </span>            <span class="token comment" spellcheck="true">//根据公式设刚开始是一个空的子串开始加 </span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token function">sum_c</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token function">sum_s</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//因为刚开始是从前到后的所以不用管 i 后面的位置 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    ll m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token punctuation">;</span>    ll x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll sum_p<span class="token operator">=</span><span class="token function">sum_s</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求出前面值为1的坐标的前缀合 </span>            ll sum_n<span class="token operator">=</span><span class="token function">sum_s</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>sum_p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求后面值为1的坐标的前缀和 </span>            ll suc_p<span class="token operator">=</span><span class="token function">sum_c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 求前面 1 一共有多少个1 </span>            ll suc_n<span class="token operator">=</span><span class="token function">sum_c</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>suc_p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 求后面一共有多少个1 </span>            <span class="token comment" spellcheck="true">//根据推出来的公式操作 </span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>y<span class="token operator">*</span>suc_p<span class="token operator">%</span>mod<span class="token operator">-</span>sum_p<span class="token operator">+</span>sum_n<span class="token operator">-</span>suc_n<span class="token operator">*</span>y<span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里一定记得再次取模！！！！！！ </span>            <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新 </span>            cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里先更新是为了更新后这个位置刚好是0；</span>                      <span class="token comment" spellcheck="true">//对求后面的值不影响     </span>            ll sum_p<span class="token operator">=</span><span class="token function">sum_s</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ll sum_n<span class="token operator">=</span><span class="token function">sum_s</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>sum_p<span class="token punctuation">;</span>            ll suc_p<span class="token operator">=</span><span class="token function">sum_c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ll suc_n<span class="token operator">=</span><span class="token function">sum_c</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span>suc_p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是把1变成0所以要减 </span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">-</span><span class="token punctuation">(</span>y<span class="token operator">*</span>suc_p<span class="token operator">-</span>sum_p<span class="token operator">+</span>sum_n<span class="token operator">-</span>suc_n<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D. Shortest and Longest LIS</title>
      <link href="/2020/04/01/D.%20Shortest%20and%20Longest%20LIS/"/>
      <url>/2020/04/01/D.%20Shortest%20and%20Longest%20LIS/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接：D-Shortest-and-Longest-LIS"><a href="#题目链接：D-Shortest-and-Longest-LIS" class="headerlink" title="题目链接：D. Shortest and Longest LIS"></a><a href="https://codeforces.com/contest/1304/problem/D" target="_blank" rel="noopener">题目链接：D. Shortest and Longest LIS</a></h1><center>time limit per test3 seconds<center>memory limit per test256 megabytes<center>inputstandard input<center>outputstandard output</center><p>Gildong recently learned how to find the longest increasing subsequence (LIS) in O(nlogn) time for a sequence of length n. He wants to test himself if he can implement it correctly, but he couldn’t find any online judges that would do it (even though there are actually many of them). So instead he’s going to make a quiz for you about making permutations of n distinct integers between 1 and n, inclusive, to test his code with your output.</p><p>The quiz is as follows.</p><p>Gildong provides a string of length n−1, consisting of characters ‘&lt;’ and ‘&gt;’ only. The i-th (1-indexed) character is the comparison result between the i-th element and the i+1-st element of the sequence. If the i-th character of the string is ‘&lt;’, then the i-th element of the sequence is less than the i+1-st element. If the i-th character of the string is ‘&gt;’, then the i-th element of the sequence is greater than the i+1-st element.</p><p>He wants you to find two possible sequences (not necessarily distinct) consisting of n distinct integers between 1 and n, inclusive, each satisfying the comparison results, where the length of the LIS of the first sequence is minimum possible, and the length of the LIS of the second sequence is maximum possible.</p><p>Input<br>Each test contains one or more test cases. The first line contains the number of test cases t (1≤t≤104).</p><p>Each test case contains exactly one line, consisting of an integer and a string consisting of characters ‘&lt;’ and ‘&gt;’ only. The integer is n (2≤n≤2⋅105), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is n−1.</p><p>It is guaranteed that the sum of all n in all test cases doesn’t exceed 2⋅10^5^.</p><p>Output<br>For each test case, print two lines with n integers each. The first line is the sequence with the minimum length of the LIS, and the second line is the sequence with the maximum length of the LIS. If there are multiple answers, print any one of them. Each sequence should contain all integers between 1 and n, inclusive, and should satisfy the comparison results.</p><p>It can be shown that at least one answer always exists.</p><p>Example</p><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span><span class="token number">7</span> <span class="token operator">>></span><span class="token operator">&lt;</span><span class="token operator">>></span><span class="token operator">&lt;</span><span class="token number">5</span> <span class="token operator">>></span><span class="token operator">></span><span class="token operator">&lt;</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">6</span><span class="token number">4</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">7</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">6</span><span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">5</span><span class="token number">5</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span></code></pre><p><strong>Note</strong><br>In the first case, 1 2 3 is the only possible answer.<br>In the second case, the shortest length of the LIS is 2, and the longest length of the LIS is 3. In the example of the maximum LIS sequence, 4 ‘3’ 1 7 ‘5’ 2 ‘6’ can be one of the possible LIS.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>先给你一个数字 t 便是有T 组，然后给了一个N 表示有N个数，后面跟着N-1个字符，表示一个大小关系，然后让你输出个一构造出的最短和最长的上升子序列。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>看了大佬们的博客后才知道，远了这个题这么妙，如果是最长的我肯定想尽可能的让所有的 &gt; 可以联合到一起，对于最短的我们一个策略就是让 &gt; 尽可能的不能相连，那么的话我们可以采取一个分块的策略，分别根据 &lt; 和 &gt; 进行分块，对于最短的我们肯定是我们按照 &gt; 将这个序列分成若干块，让大的数子尽可能的放到前面，对于最长的我们按照 &lt; 进行换分让前面的数字尽可能的小，让我们看下代码吧</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">200010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">200100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先处理最短的 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当走倒最后一个，或者遇到 > 进行划分 </span>            <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//将其分成一块进行赋值 </span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">>=</span>l<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//因为是最短，所以需要让前面的数字尽可能的大 </span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为是用 > 进行分割的所以这一块里面都是小于号   </span>                l<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//从后向前开始复制，之后移动左边界    </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理最长的 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这是按照 &lt; 进行划分 </span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">>=</span>l<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将前面的值尽可能的小 </span>                b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为这个区间内都是 > 号所以还是才有从后向前走 </span>                l<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F2. Animal Observation (hard version)</title>
      <link href="/2020/04/01/F2.%20Animal%20Observation%20(hard%20version)/"/>
      <url>/2020/04/01/F2.%20Animal%20Observation%20(hard%20version)/</url>
      
        <content type="html"><![CDATA[<h1 id="F2-Animal-Observation-hard-version"><a href="#F2-Animal-Observation-hard-version" class="headerlink" title="F2. Animal Observation (hard version)"></a><a href="https://codeforces.com/contest/1304/problem/F2" target="_blank" rel="noopener">F2. Animal Observation (hard version)</a></h1><center>time limit per test：3 seconds<center>memory limit per test：512 megabytes<center>inputstandard input<center>outputstandard output<p>The only difference between easy and hard versions is the constraint on k.</p><p>Gildong loves observing animals, so he bought two cameras to take videos of wild animals in a forest. The color of one camera is red, and the other one’s color is blue.</p><p>Gildong is going to take videos for n days, starting from day 1 to day n. The forest can be divided into m areas, numbered from 1 to m. He’ll use the cameras in the following way:</p><p>On every odd day (1-st, 3-rd, 5-th, …), bring the red camera to the forest and record a video for 2 days.<br>On every even day (2-nd, 4-th, 6-th, …), bring the blue camera to the forest and record a video for 2 days.<br>If he starts recording on the n-th day with one of the cameras, the camera records for only one day.<br>Each camera can observe k consecutive areas of the forest. For example, if m=5 and k=3, he can put a camera to observe one of these three ranges of areas for two days: [1,3], [2,4], and [3,5].</p><p>Gildong got information about how many animals will be seen in each area on each day. Since he would like to observe as many animals as possible, he wants you to find the best way to place the two cameras for n days. Note that if the two cameras are observing the same area on the same day, the animals observed in that area are counted only once.</p><p>Input<br>The first line contains three integers n, m, and k (1≤n≤50, 1≤m≤2⋅10^4^, 1≤k≤m) – the number of days Gildong is going to record, the number of areas of the forest, and the range of the cameras, respectively.</p><p>Next n lines contain m integers each. The j-th integer in the i+1-st line is the number of animals that can be seen on the i-th day in the j-th area. Each number of animals is between 0 and 1000, inclusive.</p><p>Output<br>Print one integer – the maximum number of animals that can be observed.</p><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">4</span> <span class="token number">5</span> <span class="token number">2</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">4</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">25</span></code></pre><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span> <span class="token number">3</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">31</span></code></pre><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">44</span></code></pre><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span> <span class="token number">3</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">45</span></code></pre><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出n，m，k，分别表示有n天m个位置，一个相机可以拍到连续的 k 个位置，他有两个相机每个相机能放在一个位置两天，并且这两个相机分别只能在奇数天或者偶数天放出去拍摄，现在知道了这n天每天这m个位置会出现的动物的数量，问你最多可以拍到多少个动物，同一天的一个位置只能计算一次。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>为了方便统计放到某个位置可以拍到的数量和，我们先统计每一行的前缀和，这样计算连续k的区间的和的话就比较方便了，<strong>我用一个dp[i][j] 记录相机第 i 天放到第 j 个位能够拍到的最多数量，然后下一天加上上一天最多的位置，就可以了。当让你计算前一天最多的位置的时候要先减去，前一天在这个位置排到的，然后统计完以后还要在加上这个位置的数量</strong>，这个过程个一用一个线段树去维护一个区间最大值就可以了。<br>举个栗子看下吧<br>4 5 2<br>0 2 1 1 0<br>0 0 3 1 2<br>1 0 4 3 1<br>3 3 0 0 4<br>首先肯定是预处理第一天的所以第一天的位置分别是2 6 6 4 2<br>这时候去构建一课线段树，树的最下面元素分别是2 6 6 4 2<br>当计算第二天的时候 如果相机放到第一个位置，那么首先线段树最先面的第一个位置的值要减去第二天在第1和第2个位置的值，即2-0-0；因为第二天相机放在第一位置的时候也能拍到这两个位置的值，和第一天的这个位置重复了，所以要先减去，之后再看看第一天放到哪个位置的数量最多，<strong>dp[2][1]=tre[1]+放到这个位置连续两天拍摄的数量和。<del>tre[1]是上一天这m个位置中对多的</del></strong> 然后我们要在前一天的这个位置上加上 a[i][j]；因为当第二天这个相机放到第二个位置的时候，第一天可以拍到的第二天的第一个位置这个位置就不会重复，所以把之前减去了再加上。这时候再将第 k+j 这个位置的值减去a[i][k+j]，因为第二天的时候放到第二个位置的时候，前一天放到这个位置的时候已经拍到了这个位置。然后依次类推下去就行了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录前缀和 </span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tre<span class="token punctuation">[</span><span class="token number">80040</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存值 </span><span class="token keyword">int</span> laz<span class="token punctuation">[</span><span class="token number">80040</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lazy标记 </span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录第几题放到第几个位置能拍到最多的数量 </span><span class="token keyword">void</span> <span class="token function">up_down</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将 lazy数组的值向下传递 </span>    laz<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    laz<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    tre<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    tre<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//进行更新 </span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> ql<span class="token punctuation">,</span><span class="token keyword">int</span> qr<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>l<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>k<span class="token punctuation">;</span>        laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>laz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">up_down</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> <span class="token function">up</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>qr<span class="token operator">></span>mid<span class="token punctuation">)</span> <span class="token function">up</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    tre<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求区间和 </span><span class="token keyword">int</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> xl<span class="token punctuation">,</span><span class="token keyword">int</span> yl<span class="token punctuation">,</span><span class="token keyword">int</span> yr<span class="token punctuation">)</span><span class="token punctuation">{</span>    yl<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">[</span>xl<span class="token punctuation">]</span><span class="token punctuation">[</span>yr<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>xl<span class="token punctuation">]</span><span class="token punctuation">[</span>yl<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>xl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>yr<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>xl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>yl<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录前缀和 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新第一天区间 </span>    <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token number">-1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连续的k个位置依次向后移动 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每天开始的时候都要初始化 </span>        <span class="token function">memset</span><span class="token punctuation">(</span>tre<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> tre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>laz<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> laz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新线段树的值 </span>        <span class="token punctuation">{</span>            <span class="token function">up</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//减去前一天放在第一个位置和今天放在第一个位置重复拍到的数量 </span>            <span class="token function">up</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">Sum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>j<span class="token operator">+</span>k<span class="token number">-1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前一天能拍到的最大值加上今天在这个位置拍到的数量 </span>            <span class="token function">up</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>j<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在前天这个位置排到的数量加上这个位置 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span>k<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//因为相机放在第二个位置，就拍不到第一个位置了所以第一个位置就不会重复了 </span>            <span class="token punctuation">{</span>                <span class="token function">up</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span>k<span class="token punctuation">,</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要放到下个位置的时候，减去如果前一天在下个位置已经排到的 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出最大值 </span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></center></center></center></center>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-2020 ICPC Southeastern European Regional Programming Contest (SEERC 2019)-G.Projection</title>
      <link href="/2019/11/11/2019-2020%20ICPC%20Southeastern%20European%20Regional%20Programming%20Contest%20(SEERC%202019)-G.Projection/"/>
      <url>/2019/11/11/2019-2020%20ICPC%20Southeastern%20European%20Regional%20Programming%20Contest%20(SEERC%202019)-G.Projection/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102392/problem/G" target="_blank" rel="noopener">题目链接：G. Projection</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Everybody knows that you are a TensorFlow fan. Therefore, you’ve been challenged to recreate the TensorFlow logo from two projections.</p><p>Consider that you have a 3D volume, n×m×h, and two projections (two matrices with dimensions n×m and n×h with elements 0 and 1). You are asked to compute a possible sets of cubes that must be placed inside the 3D volume such that the 3D object created with the cubes throws the shadows specified by the projection-matrices, when the light comes from left and front. If it is not possible, just print −1. If it is possible you must find exactly two sets, one with the maximum amount of cubes and one with the minimum amount. You can assume there is no gravitation (the cubes are located inside the 3D volume exactly where they are placed, without requiring any support). We assume that 1 represents shadow and 0 represents light.</p><p>If there are multiple such solutions, you must output the minimum lexicographic one. One solution A is lexicographically smaller than another solution b if the first number that differs between the two solutions is smaller in a than in b.</p><p>For example, solution [(0,0,0),(1,1,1)] is smaller than [(1,1,1),(0,0,0)].</p><p><strong>Input</strong><br>The first line contains three integers separated by a single space n, m, h (1≤n,m,h≤100) — the volume dimensions.</p><p>Each of the next n lines contains m characters, each being either 1 or 0 representing either a shadow area (1) or a light area (0), describing the projection from the light in the front.</p><p>Each of the next n lines contains h characters, with the same format as above, describing the projection from the light on the left.</p><p><strong>Output</strong><br>The output should contain on the first line one number, either −1 if there is no solution or kmax representing the maximum number of cubes we can assign in the volume that will generate the two projections given in the input.</p><p>The next kmax lines should contain triplets of numbers x, y, z (0≤x&lt;n, 0≤y&lt;m, 0≤z&lt;h) representing the cubes chosen in the lexicographically smallest solution with maximum number of cubes.</p><p>Then, only if there is a solution, one more line follows containing kmin, the minimum number of cubes we can assign in the volume that will generate the two projections given in the input.</p><p>After that, the next kmin lines should contain triplets of numbers x, y, z (0≤x&lt;n, 0≤y&lt;m, 0≤z&lt;h) representing the cubes in the lexicographically smallest solution with minimum number of cubes.</p><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">5</span> <span class="token number">3</span> <span class="token number">3</span><span class="token number">111</span><span class="token number">010</span><span class="token number">010</span><span class="token number">010</span><span class="token number">010</span><span class="token number">111</span><span class="token number">100</span><span class="token number">110</span><span class="token number">100</span><span class="token number">100</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">14</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">8</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">0</span></code></pre><p><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">00</span><span class="token number">00</span><span class="token number">11</span><span class="token number">11</span></code></pre><p><strong>output</strong><br>-1<br><strong>input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span><span class="token number">101</span><span class="token number">011</span><span class="token number">10</span><span class="token number">11</span></code></pre><p><strong>output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">6</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">4</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span></code></pre><p><strong>Note</strong><br>A cube at coordinates (x,y,z) will generate a shadow at line x and column y in the n×m projection and line x and column z in the n×h projection (indexed from 0).</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个立方体的侧面投影和正面的投影，1表示是阴影部分，0表示没有；让你判断它是否可以组成一个立方体，<strong>如果能</strong>那就先输出需要花费最多的小方块的个数，接着输出小方块的位置，再输出需要花费最少的小方块的个数，和他们的位置，<strong>如果不能的话就输出-1</strong>，本题忽略万有引力（也就是小方块可以腾空放置，还好忽略了要不然真的是不会搞了），输出的是也是有规定的，就是输出的时候输出字典序最小的一组方案（真是要求多）</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们首先判断是否成立，如何判断呢？我们可以将左侧投影有压缩到 n 轴上，正面的也压缩的n轴上，然后比较在 n 轴的同一个位置如果正面的投影或者侧面的投影一个为零另一个却不为零的时候就不成立！直接输出 -1；<br><strong>最大值</strong>也好判断，只要侧面投影的一个位置是阴影就去遍历正面的投影的 n 轴的m个位置，只有是影音就将这个位置存起来；计算过程中找个计数器遇到成立的情况就 +1；<br><strong>最小值</strong><br>最小值有点麻烦，当我们去求最小值的时候，先要知道侧面投影和正面投影的这一层有几个阴影，因为需要字典序最小，那么我们就要尽可能的让侧面的第一个位置对应的立体空间出放，如果侧面投影比正面的的数量多，我们就想让侧面的位置向后移动去放小方块，如果侧面的比正面的少，那就让侧面的先不动，让正面的向后移动，当然相等的时候就一起向后移动就行了；<br><strong>比如说第 1 层吧；侧面投影是011010，正面投影是101；<br>那么我在第一层摆放的的方案应该是（1,1,0）,（1,2,1）,（1,4,2）这个就是先移动侧面的</strong><br>说的不是很清，直接看代码吧！这个题挺傻逼的，自己模拟几遍应该就没问题了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> hang<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lie<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> zuo<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> zheng<span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>h<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token punctuation">}</span>Max<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Min<span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分别存最大值和最小值时的 注意 立体坐标 n*m*h最大是1e6； </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%1d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>zuo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token operator">=</span>f<span class="token operator">+</span>zuo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次记录侧面投影有几个阴影小块 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>h<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%1d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>zheng<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次记录正面投影有几个阴影小块</span>            f<span class="token operator">+</span><span class="token operator">=</span>zheng<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是否可行 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>lie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">max</span><span class="token punctuation">(</span>hang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>lie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>lie<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*************数量最多的情况 ***************</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从第一层开始遍历 </span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//侧面 第 i层的第一个位置开始 </span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>zuo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果这个位置是 1 那么就让第 i 层 的的正面的有可能是阴影的地方都是阴影 </span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>h<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>zheng<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果这个正面投影的第 i 层第 k 课位置是阴影 </span>                    <span class="token punctuation">{</span>                        Max<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 那么在立体坐标中 （i，j， k） 这个位置就是阴影 </span>                        Max<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>                        Max<span class="token punctuation">[</span>sum<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>k<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//********************数量最少的情况*********************** </span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>qf<span class="token punctuation">,</span>ql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个地方用vector也是可以的 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>zuo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> qf<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先将侧面投影中出现阴影的坐标放入侧面队列中 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>h<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>zheng<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> ql<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正面投影也如此投影 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>qf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>ql<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果侧面的数量比正面的多，就让侧面向后的位置在 m 列的阴影处放 </span>            Min<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>qf<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>ql<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            qf<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//弹出第一个元素 </span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>qf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ql<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果正面的比侧面的多，那么就让侧面的先跑 </span>        <span class="token punctuation">{</span>            Min<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>qf<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>ql<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ql<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qf<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//一样的时候就一起跑 </span>        <span class="token punctuation">{</span>            Min<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>qf<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Min<span class="token punctuation">[</span>ans<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token operator">=</span>ql<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ql<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            qf<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 完结散花，输出数量和坐标 </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>Max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ans<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span>Min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> G.Projection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Infinite Fraction Path</title>
      <link href="/2019/10/15/HDU-6223-Infinite%20Fraction%20Path/"/>
      <url>/2019/10/15/HDU-6223-Infinite%20Fraction%20Path/</url>
      
        <content type="html"><![CDATA[<center>**Infinite Fraction Path** </center><center>Time Limit: 6000/3000 MS (Java/Others) </center><center>Memory Limit: 262144/262144 K (Java/Others)</center><center>Total Submission(s): 6221    Accepted Submission(s): 1209</center><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a><strong>Problem Description</strong></h1><p>The ant Welly now dedicates himself to urban infrastructure. He came to the kingdom of numbers and solicited an audience with the king. He recounted how he had built a happy path in the kingdom of happiness. The king affirmed Welly’s talent and hoped that this talent can help him find the best infinite fraction path before the anniversary.<br>The kingdom has N cities numbered from 0 to N - 1 and you are given an array D[0 … N - 1] of decimal digits (0 ≤ D[i] ≤ 9, D[i] is an integer). The destination of the only one-way road start from the i-th city is the city labelled (i2 + 1)%N.<br>A path beginning from the i-th city would pass through the cities u1,u2,u3, and so on consecutively. The path constructs a real number A[i], called the relevant fraction such that the integer part of it is equal to zero and its fractional part is an infinite decimal fraction with digits D[i], D[u1], D[u2], and so on.<br>The best infinite fraction path is the one with the largest relevant fraction</p><p><strong>Input</strong><br>The input contains multiple test cases and the first line provides an integer up to 100 indicating to the total numberof test cases.<br>For each test case, the first line contains the integer N (1 ≤ N ≤ 150000). The second line contains an array ofdigits D, given without spaces.<br>The summation of N is smaller than 2000000.</p><p><strong>Output</strong><br>For each test case, you should output the label of the case first. Then you are to output exactly N characters which are the first N digits of the fractional part of the largest relevant fraction.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h1><pre class=" language-c"><code class="language-c"><span class="token number">4</span><span class="token number">3</span><span class="token number">149</span><span class="token number">5</span><span class="token number">12345</span><span class="token number">7</span><span class="token number">3214567</span><span class="token number">9</span><span class="token number">261025520</span></code></pre><p><strong>Sample Output</strong></p><pre class=" language-c"><code class="language-c">Case #<span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">999</span>Case #<span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">53123</span>Case #<span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">7166666</span>Case #<span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">615015015</span></code></pre><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6223" target="_blank" rel="noopener"><strong>题目链接：HUD-6223</strong> </a></p><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>这道题的意思是给你一串字符串长度为n，从0到n-1，然后第一个位置只能通往（i *i+1）%n，这个位置然后让你输出从一个位置开始跳然后链接每个位置上的字符形成一个长度为n的字符串的字典序最大；</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>毫无疑问这个题肯等要从最大的字符看是跳，但是如果最大的数字有好几个呢？那我们只有一个一个的慢慢的遍历了，但是直接遍历的话肯定会超时的，那我们该如何做呢？<br><strong>我们可以用BFS加上优先队列去解决</strong><br>1.因为比较字符串的字典序肯定是由前到后一个个的比较，那么我们就刚好可以有BFS吧这些字符串    进行分层，<br>2.但是分层的是后肯定要借助优先队列了，我们首先把最大的字符串设为第一层放入优先队列，优先队列里面的元素先按照层数由小到大出队，当层数相同时按照谁大谁先出队，然后借助BFS进行分层每次每次放入队列的元素的层数为当前的层数+1，这样就解决了。<br>大致的思路有了那么就是<strong>处理起来的细节了和外加优化，</strong><br><strong>1，</strong> 当遍历到的这个位置对应的字符比队列里面的小，那么我们就可以直接结束了，因为在遍历下去也没有意义了，只会浪费时间。<br><strong>2，</strong> 但遍历同一层的时候对数组进行标记，一旦这个数组被标记过了那么这个也不用遍历了，因为一个一个位置能通往的下一个位置也是固定不变的，这个字符串已经和当前的这个状态重复了。<br><strong>3，</strong> 当遍历到的这个位置对应的字符比队列里面的大，那么我们就把这个一层的这个位置给更新了然后直接结束了。<br><strong>4，</strong> 每当更新到下一层的时候一定要把标记数组给清空了，防止不同层数的数都是不同位置的当前最大数，比如说第一层最大是9，但是这个位置通往的下一个位置对应的数还是9，下一层还是9，这样的话如果你不更行，就会出错；<br><strong>5，</strong> 因为数据太大了如果用memset初始化数组的话肯定会超时的，所以自己初始化数组，还有个小坑点就是 i*i会爆 int 所以存的时候直接用 long long</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化字符串数组 </span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否被标记过 </span><span class="token keyword">char</span> mm<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果答案字符数组 </span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录位置 </span><span class="token keyword">int</span> ma<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前记录位置的数组里面中有几个元素 </span>ll n<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ll id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个节点对应的字符串的位置 </span>    <span class="token keyword">int</span> st<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//层数 </span>    <span class="token function">Node</span><span class="token punctuation">(</span>ll x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这个是为了在队列放元素的时候直接有  Node (x,y)；这样用 </span>    <span class="token punctuation">{</span>        id<span class="token operator">=</span>x<span class="token punctuation">;</span>        st<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    friend bool operator <span class="token operator">&lt;</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span>Node b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定义 优先队列里面的排列顺序</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>st<span class="token operator">==</span>b<span class="token punctuation">.</span>st<span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">[</span>a<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">&lt;</span>s<span class="token punctuation">[</span>b<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>st<span class="token operator">></span>b<span class="token punctuation">.</span>st<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>Node<span class="token operator">></span>que<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示当前是第几层 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node now<span class="token operator">=</span>que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>st<span class="token operator">!=</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果层数变化了，那么就要初始化标记数组了 </span>        <span class="token punctuation">{</span>            flag<span class="token operator">=</span>now<span class="token punctuation">.</span>st<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新当前的位置 </span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ma<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>f<span class="token punctuation">[</span><span class="token operator">--</span>ma<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化为零 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>st<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>mm<span class="token punctuation">[</span>now<span class="token punctuation">.</span>st<span class="token punctuation">]</span><span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>now<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>now<span class="token punctuation">.</span>id <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当前位置没被标记果 </span>        <span class="token punctuation">{</span>                                                <span class="token comment" spellcheck="true">//且当前的位置和结果数组的当前层数相同时放入队列中 </span>            vis<span class="token punctuation">[</span>now<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 防止重复处理，将该位置标记 </span>            f<span class="token punctuation">[</span>ma<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>now<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前这一层的数别标记的个数加一，并且记录该位置，为了方便下次初始化 </span>            mm<span class="token punctuation">[</span>now<span class="token punctuation">.</span>st<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>now<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该位置的字符满足了题目要求防如结果里面这样其实也是每次都会更新结果数组的值只是等新的值都是大于等于以前的值得 </span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>id<span class="token operator">*</span>now<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">,</span>now<span class="token punctuation">.</span>st<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将该位置放入队列中 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> K<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> maxn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>maxn<span class="token punctuation">)</span> maxn<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出最大的元素 </span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Node</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把最大的元素全部作为第一层放入优先队列里 </span>        <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始搜索 </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d: "</span><span class="token punctuation">,</span>K<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">putchar</span><span class="token punctuation">(</span>mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//每次操作完以后都要把结果数组给初始化因为是多组输入，这样避免这次结果对下次的结果造成影响 </span>            mm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HDU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Infinite Fraction Path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列卷积</title>
      <link href="/2019/09/20/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E5%8D%B7%E7%A7%AF/"/>
      <url>/2019/09/20/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E5%8D%B7%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/1087/C" target="_blank" rel="noopener"> <strong>题目链接：</strong></a></p><h1 id="斐波那契数列卷积"><a href="#斐波那契数列卷积" class="headerlink" title="斐波那契数列卷积"></a><strong>斐波那契数列卷积</strong></h1><p><img src="https://cf.cndrew.cn/images/2019/09/20/B1HQ8L7KO8THU3Y35ELI.png" alt><br><strong>示例1</strong><br>输入</p><pre><code>3</code></pre><p>输出</p><pre><code>2</code></pre><p><strong>示例2</strong><br>输入</p><pre><code>19260817</code></pre><p>输出</p><pre><code>511682927</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>提前我们要知道 Fn=Fn-1+Fn-2<br>规律是适合的，因为写起来太麻烦所以这就举个例子说明吧，<br>A7= F0* F7 + F1* F6 + F2* F5 + F3* F4 + F4* F3 + F5* F2 + F6* F1 + F7* F0<br>A6= F0* F6 + F1* F5 + F2* F4 + F3* F3 + F4* F2 + F5* F1 + F6* F0<br>A7-A6=F0<em>(F7-F6) + F1</em>(F6-F5) + F2<em>(F5-F4) + F3</em>(F4-F3) + F4<em>(F3-F2) + F5</em>(F2-F1) + F6<em>(F1-F0) + F7</em> F0<br>因为 F1=1,F0=0；所以F6<em>(F1-F0)=F6；<br>A7-A6=F0</em> F5 + F1* F4 + F2* F3 + F3* F2 + F4* F1 + F5* F0 + F6<br>A7-A6=A5+F6；<br>也就是 <strong>An=An-1+An-2+Fn-1</strong><br>这样就可以用矩阵快速幂来构造一个矩阵来求了（感谢bly提供的方程，tql）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    ll a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>node <span class="token function">mul</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    node ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>node <span class="token function">poww</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token punctuation">{</span>    node ans<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>    ans<span class="token operator">=</span><span class="token function">mul</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token function">mul</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>node yl<span class="token punctuation">,</span>bly<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>yl<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>yl<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>bly<span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bly<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    yl<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    bly<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    bly<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    bly<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        node ans<span class="token operator">=</span><span class="token function">poww</span><span class="token punctuation">(</span>yl<span class="token punctuation">,</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">mul</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>bly<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 矩阵快速幂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF-1121D-D. Make The Fence Great Again</title>
      <link href="/2019/09/20/CF-1121D-D.%20Make%20The%20Fence%20Great%20Again/"/>
      <url>/2019/09/20/CF-1121D-D.%20Make%20The%20Fence%20Great%20Again/</url>
      
        <content type="html"><![CDATA[<h1 id="D-Make-The-Fence-Great-Again"><a href="#D-Make-The-Fence-Great-Again" class="headerlink" title="D. Make The Fence Great Again "></a><center>D. Make The Fence Great Again </center></h1><center>time limit per test：2 seconds </center><center>memory limit per test：256 megabytes </center><center>inputstandard input </center><center>outputstandard output </center><p>You have a fence consisting of n vertical boards. The width of each board is 1. The height of the i-th board is ai. You think that the fence is great if there is no pair of adjacent boards having the same height. More formally, the fence is great if and only if for all indices from 2 to n, the condition ai−1≠ai holds.</p><p>Unfortunately, it is possible that now your fence is not great. But you can change it! You can increase the length of the i-th board by 1, but you have to pay bi rubles for it. The length of each board can be increased any number of times (possibly, zero).</p><p>Calculate the minimum number of rubles you have to spend to make the fence great again!</p><p>You have to answer q independent queries.</p><p><strong>Input</strong><br>The first line contains one integer q (1≤q≤3⋅105) — the number of queries.</p><p>The first line of each query contains one integers n (1≤n≤3⋅105) — the number of boards in the fence.</p><p>The following n lines of each query contain the descriptions of the boards. The i-th line contains two integers ai and bi (1≤ai,bi≤109) — the length of the i-th board and the price for increasing it by 1, respectively.</p><p>It is guaranteed that sum of all n over all queries not exceed 3⋅105.</p><p>It is guaranteed that answer to each query will not exceed 1018.</p><p><strong>Output</strong><br>For each query print one integer — the minimum number of rubles you have to spend to make the fence great.</p><p><strong>Example</strong><br>input</p><pre><code>332 42 13 532 32 102 641 73 32 61000000000 2</code></pre><p>outputCopy</p><pre><code>290</code></pre><p><strong>Note</strong><br>In the first query you have to increase the length of second board by 2. So your total costs if 2⋅b2=2.</p><p>In the second query you have to increase the length of first board by 1 and the length of third board by 1. So your total costs if 1⋅b1+1⋅b3=9.</p><p>In the third query the fence is great initially, so you don’t need to spend rubles.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>一共有 t 次询问，每次有 n 组数据，分别是 ai(表示篱笆的高度) bi(表示每增加一个高度需要花费的钱数)；现在要求任意相邻的篱笆高度不能相同，问你最少需要花费多少钱 </p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是一个可以用DP来暴力的，我们枚举相邻的两个篱笆，让他们增高的方案有9种分别是 前一个不增加后一个分别增加 0 1 2，然后前一个增加 1 后一个 0 1 2；最后一种就是前一个 增加 2 后一个增加 0 1 2；这样就可以枚举每一种可能了，并且很巧妙的是一个栏杆增加这三种可能刚好可以满足要求。我们只需要用dp来记录下上一个状态然后一直继续下去就行了<strong>（这个题好像要用scanf，和printf不然有可能会TLE）</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span>ll a<span class="token punctuation">[</span><span class="token number">300009</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">300009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll dp<span class="token punctuation">[</span><span class="token number">300009</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2e18</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">!=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> CF-1121D-D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列自动机</title>
      <link href="/2019/09/07/%E5%BA%8F%E5%88%97%E8%87%AA%E5%8A%A8%E6%9C%BA-%E5%AD%90%E4%B8%B2%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/09/07/%E5%BA%8F%E5%88%97%E8%87%AA%E5%8A%A8%E6%9C%BA-%E5%AD%90%E4%B8%B2%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>今天刚学了序列自动机感觉挺妙的；<br>这个就是给你一个母串，再给一下子串让你判断哪些子串是他的子串<br>这时候我们可以先对母串进行预处理一下：<br><strong>用一个二维数来记录第i个位置后面的每个字母出现的第一个位置，dp[i][j]表示第 i 个位置以后字母 j 第一次出现的位置；当这个预处理结束后我们在查找的时候就可以找到这个字母的位置后再从这个位置查找下个字符这样一直跳着来查询就可以很快的查找结束了</strong><br><strong>预处理</strong><br>我们可以从后向前慢慢的遍历这样一个循环就好了，但是注意存储的时候需要从第一个数开始，初始化的时候把数组初始化为 -1 ；比如 第 i+1 个字符是 a 那么dp[i][a]=i+1;其他的字符都是dp[i][b]=dp[i+1][b];<br><strong>查找</strong><br>i=0；<br>直接从dp[i][x] (x为需要判断的子串的第一个字符);然后每次更新 i 的位置，顺序的遍历需要判断的子串的每个字符就可以了，一旦遇到 -1 就结束说明不可能是；</p><p><strong>下面看个例题吧</strong><br><a href="https://ac.nowcoder.com/acm/contest/1083/B" target="_blank" rel="noopener"><strong>子串查询：题目链接</strong></a><br>时间限制：C/C++ 1秒，其他语言2秒<br>空间限制：C/C++ 32768K，其他语言65536K<br>64bit IO Format: %lld<br><strong>题目描述</strong><br>给出一个长度为n的字符串s和q个查询。对于每一个查询，会输入一个字符串t，你需要判断这个字符串t是不是s的子串。子串的定义就是存在任意下标a&lt;b&lt;c&lt;d&lt;e，那么”s[a]s[b]s[c]s[d]s[e]”就构成s的一个子串。如”abc”的子串有”a”、”b”、”c”、”ab”、”ac”、”bc”、”abc”。<br><strong>输入描述:</strong><br>第一行两个数n，q。1&lt;=n，q&lt;=1e5。</p><p>第二行一个长度为n的字符串s,所有字符都为小写拉丁字符。</p><p>接下来q行每行一个字符串t。1&lt;=|t|&lt;=50。<br><strong>输出描述:</strong><br>对于每个查询，如果t是s的字串，输出”YES”,否则输出”NO”。每个答案占一行。<br><strong>输入</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">8</span> <span class="token number">4</span>ababcbaaabacaccbaaaaabcba</code></pre><p><strong>输出</strong></p><pre class=" language-c"><code class="language-c">YESNOYESYES</code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构建动态的数组 </span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化的值只要不可能出现就行 </span>    <span class="token comment" spellcheck="true">//记录这个位置以后最先出现的字符 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从倒数二个位置开始遍历 </span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 判断这个位置的下个字符 i 的位置 </span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果下个字符是 i 就更新位置 </span>               dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果不等就 和上个位置一样 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为进行预处理的时候是这个位置以后最先出现的字符</span>    <span class="token comment" spellcheck="true">//所以不能从0开始存字符 ，要从1开始 </span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> le<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        bool flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化 j=0； </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>le<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//顺序遍历子串的每个字符 </span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果等于-1就结束 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            j<span class="token operator">=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新j的位置 </span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span>flag<span class="token operator">?</span><span class="token string">"NO"</span><span class="token punctuation">:</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 序列自动机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2019/08/07/%E5%B9%B6%E6%9F%A5%E9%9B%86&amp;%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2019/08/07/%E5%B9%B6%E6%9F%A5%E9%9B%86&amp;%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Cube-Stacking"><a href="#Cube-Stacking" class="headerlink" title="Cube Stacking"></a>Cube Stacking</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>Description</strong></p><blockquote><p>Farmer John and Betsy are playing a game with N (1 &lt;= N &lt;= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1&lt;= P &lt;= 100,000) operation. There are two types of operations:<br>moves and counts. </p><ul><li>In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y. </li><li>In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value.<br>Write a program that can verify the results of the game. </li></ul></blockquote><p><strong>Input</strong></p><blockquote><ul><li>Line 1: A single integer, P * Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a ‘M’ for a move operation or a ‘C’ for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X.<br>Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself. </li></ul></blockquote><p><strong>Output</strong></p><blockquote><p>Print the output from each of the count operations in the same order as the input file.<br><strong>Sample Input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">6</span>M <span class="token number">1</span> <span class="token number">6</span>C <span class="token number">1</span>M <span class="token number">2</span> <span class="token number">4</span>M <span class="token number">2</span> <span class="token number">6</span>C <span class="token number">3</span>C <span class="token number">4</span></code></pre><p><strong>Sample Output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token number">0</span><span class="token number">2</span></code></pre><p><a href="http://poj.org/problem?id=1988" target="_blank" rel="noopener"><strong>题目链接POJ-1988-Cube Stacking</strong></a></p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>POJ 的题真的是对小白选手的一个大的磨炼了，看了好久才明白题意，然后发现还是不会写题意就是<strong>给你一个数n，然后又n次操作，每次操作有两种情况如果第一个字符是 M 那么就是把含 y 的队伍放在含 x 队伍下面，如果是 C 的话就输出 x 下面有几个数 ** 这个题真的是很妙呀！把递归和并查集完美的结合在一起的，</strong>我们需要先设置三个数组分别 用于 1，找该节点的父节点，2该节点到其祖先节点的距离，3以该节点为祖先节点的点有几个；每次查找然后更新一旦遇到C，就用该节点的祖先节点包含的点数减去这个点到其祖先节点的数量就可以啦，但是如何实施就是很关键有点点困难了！不过递归加回溯却刚好可以解决这个问题**真的太舒服了，这个操作真是6呀！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">30500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 存节点 </span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">30500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以该节点为父节点的节点一共有几个 </span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">30200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  该节点到其父节点的距离 </span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 整个程序的核心算法 递归用的真是666666 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> s<span class="token operator">=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将其上一个节点的值付给s </span>        fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//x到其祖先节点的值等于他到他父节点的值加</span>                  <span class="token comment" spellcheck="true">//上起父节点到其祖先节点的距离 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">jion</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token operator">!=</span>yy<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">=</span>xx<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为把yy的父节点接到xx的父节点后面了 </span>        b<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所以yy到最终祖先节点的距离等于他到本来的祖先的距离 </span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//加上xx到其祖先节点的距离，此时新的祖先节点的子孙 </span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数量等于 以前 xx 的子孙加上 yy 的祖孙； </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">30009</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自己到自己的距离为0；</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刚开始的时候每个节点都是一个祖先节点包含自己所以为1；</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第i个值为自己方便以后找祖先节点</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'M'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">jion</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找 x的祖先节点 </span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  x 下面的节点等于总结点数减去x到祖先节点的个数 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="HDU-3635-Dragon-Balls"><a href="#HDU-3635-Dragon-Balls" class="headerlink" title="HDU - 3635- Dragon Balls"></a>HDU - 3635- Dragon Balls</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>Five hundred years later, the number of dragon balls will increase unexpectedly, so it’s too difficult for Monkey King(WuKong) to gather all of the dragon balls together. </p><p>His country has N cities and there are exactly N dragon balls in the world. At first, for the ith dragon ball, the sacred dragon will puts it in the ith city. Through long years, some cities’ dragon ball(s) would be transported to other cities. To save physical strength WuKong plans to take Flying Nimbus Cloud, a magical flying cloud to gather dragon balls.<br>Every time WuKong will collect the information of one dragon ball, he will ask you the information of that ball. You must tell him which city the ball is located and how many dragon balls are there in that city, you also need to tell him how many times the ball has been transported so far.<br><strong>Input</strong><br>The first line of the input is a single positive integer T(0 &lt; T &lt;= 100).<br>For each case, the first line contains two integers: N and Q (2 &lt; N &lt;= 10000 , 2 &lt; Q &lt;= 10000).<br>Each of the following Q lines contains either a fact or a question as the follow format:<br>  T A B : All the dragon balls which are in the same city with A have been transported to the city the Bth ball in. You can assume that the two cities are different.<br>  Q A : WuKong want to know X (the id of the city Ath ball is in), Y (the count of balls in Xth city) and Z (the tranporting times of the Ath ball). (1 &lt;= A, B &lt;= N)<br><strong>Output</strong><br>For each test case, output the test case number formated as sample output. Then for each query, output a line with three integers X Y Z saparated by a blank space.<br><strong>Sample Input</strong><br>2<br>3 3<br>T 1 2<br>T 3 2<br>Q 2<br>3 4<br>T 1 2<br>Q 1<br>T 1 3<br>Q 1<br><strong>Sample Output</strong><br>Case 1:<br>2 3 0<br>Case 2:<br>2 2 1<br>3 3 2<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3635" target="_blank" rel="noopener"><strong>题目传送门：HDU - 3635- Dragon Balls</strong></a></p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>题目大意：</strong> 先给一个数 t 表示有 t 组测试 然后 每组数据有两个数 n，m 分别表示一共有n个数，m次操作，T x，y 表示把含x的队伍移动到含y的队伍里面，Q x表示查询x然后需要输出x现在的祖先节点是谁，这个节点一共有几个成员，x被移动了几次；另外每组开始的时候需要输出Case x:（这是第几组测试）<br><strong>解题思路</strong><br>这个题真的是麻烦，还是带权并查集，记录祖先节点好办每次查找就行了，总共个数也好办开个数组就行了，每次记录该祖先节点的总结点数，一单合并只要祖先节点相加就可以了，就是移动的次数难受的一批，我刚开始直接开个数组存，但是发现不行如果1,2,4；现在移动的是2，那么只用2以上的节点的移动次数加一了，1就没变所以说还是需要改进。。。经过我<del>不懈的思考</del>查找CSDN终于发现了一个秒方法，就是每次改变值把祖先节点的移动次数加一就行，然后查找节点的时候在回溯的工程中一个个的都加上，真实妙呀！！！</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> s<span class="token operator">=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>ch<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//回溯的时候更新变化数 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token operator">!=</span>yy<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总结点数相加 </span>        fa<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token operator">=</span>yy<span class="token punctuation">;</span>            ch<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面的主节点变化数+1； </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>xx<span class="token punctuation">,</span>y<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d:\n"</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'T'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>xx<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">join</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> xxx<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span>xxx<span class="token punctuation">,</span>sum<span class="token punctuation">[</span>xxx<span class="token punctuation">]</span><span class="token punctuation">,</span>ch<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="HDU-3047-Zjnu-Stadium"><a href="#HDU-3047-Zjnu-Stadium" class="headerlink" title="HDU - 3047-Zjnu Stadium"></a>HDU - 3047-Zjnu Stadium</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>In 12th Zhejiang College Students Games 2007, there was a new stadium built in Zhejiang Normal University. It was a modern stadium which could hold thousands of people. The audience Seats made a circle. The total number of columns were 300 numbered 1–300, counted clockwise, we assume the number of rows were infinite.<br>These days, Busoniya want to hold a large-scale theatrical performance in this stadium. There will be N people go there numbered 1–N. Busoniya has Reserved several seats. To make it funny, he makes M requests for these seats: A B X, which means people numbered B must seat clockwise X distance from people numbered A. For example: A is in column 4th and X is 2, then B must in column 6th (6=4+2).<br>Now your task is to judge weather the request is correct or not. The rule of your judgement is easy: when a new request has conflicts against the foregoing ones then we define it as incorrect, otherwise it is correct. Please find out all the incorrect requests and count them as R.<br><strong>Input</strong><br>There are many test cases:<br>For every case:<br>The first line has two integer N(1&lt;=N&lt;=50,000), M(0&lt;=M&lt;=100,000),separated by a space.<br>Then M lines follow, each line has 3 integer A(1&lt;=A&lt;=N), B(1&lt;=B&lt;=N), X(0&lt;=X&lt;300) (A!=B), separated by a space. </p><p><strong>Output</strong><br>For every case:<br>Output R, represents the number of incorrect request.<br><strong>Sample Input</strong><br>10 10<br>1 2 150<br>3 4 200<br>1 5 270<br>2 6 200<br>6 5 80<br>4 7 150<br>8 9 100<br>4 8 50<br>1 7 100<br>9 2 100<br><strong>Sample Output</strong><br>2<br>Hint:<br>（PS： the 5th and 10th requests are incorrect）</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p><strong>题目大意</strong><br>就是在一个圆形的桌子上坐着，现在给你n，m两个数分别表示n个人m组数据，每组数据包含x，y，s，分别表示x距离y为s，然后让你判断有几个数据是不合法的<br><strong>解题思路</strong><br>emmm mmp呀！你吃个饭那来这么多事呀？小明附体？？？这个题意识属于带权并查集，构图之类的都很容易但是如何确定关系呢？我怎么确定这两个点冲突了呢？emmmm这是这个题的关键步骤，<strong>其实我们可以开一个数组表示它距离自己的祖先节点的距离，以为一个队伍的节点只有一个祖先节点，所以以祖先节点为原点，这样的话不是一对的肯定不会冲突，冲突的话肯定是一队的而且位置一样，或者这两个节点的距离和上次的不一样那么就是不合格的，确定好思路了，那么我们就看代码吧</strong></p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">50500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">50500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示到节点的距离 </span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//圆形坐着一旦距离大于300就是又一圈开始了 </span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> s<span class="token operator">=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为可能出现相减为负值的情况 </span>    <span class="token punctuation">}</span>                               <span class="token comment" spellcheck="true">//每次更新到祖先节点的距离    </span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> xx<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token operator">!=</span>yy<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">=</span>xx<span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个祖先节点不等就更新 新的祖先节点的位置 </span>    <span class="token punctuation">}</span>                                     <span class="token comment" spellcheck="true">// 这个表示的是y的祖先节点更新后距离xx的距离    </span>    <span class="token keyword">else</span><span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 比如说1-2是40；3-4是20；那么现在有了1-3为10；把这三个节点连一起后 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4-2的距离就是40-20+10=30； </span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 说明两个节点的公共祖先是相同的，如果现在的距离和以前的不一样了，那说明也是不行的 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 并查集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包九讲</title>
      <link href="/2019/08/02/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/"/>
      <url>/2019/08/02/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/av33930433?from=search&seid=16787658342431477258" target="_blank" rel="noopener"><strong>B站上的一位大佬将的还挺不错可以点击观看</strong></a><br><a href="https://www.acwing.com/problem/" target="_blank" rel="noopener"><strong>本片博客的例题来源都还挺不错的可以进去看看</strong></a><br><strong>背包问题对于学动态规划还是挺有帮助的，写的比较简单，对于01背包可以自己画个流程图多跑几遍就可以了！个人感悟比较错漏！</strong></p><h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><p>01背包九讲里面最简单的一种了，但是也是最重要的一种，其他的几种基本上都可以用01背包的解题思路来去解决，接下来结合例题来解决一下吧；</p><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。<br>第 i 件物品的体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。<br>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。<br><strong>输出格式</strong><br>输出一个整数，表示最大价值。<br><strong>数据范围</strong><br>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000<br><strong>输入样例</strong><br>4 5<br>1 2<br>2 4<br>3 4<br>4 5<br><strong>输出样例：</strong><br>8</p></blockquote><p>这个题可以说是最直白的01背包了，我们可以用一个二维的滚动数组来存背包当前是否能装的下这件物品，然后从第一个到以后一个物品一个一个的便利，然后用数组的列表示当前背包容量为j的时候可以装的最大价值是多少；如果j小于当前的重量，那么就能装的下，他的容积就是上一个物品时的价值；说的不是很清楚直接看代码吧！</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重量 </span><span class="token keyword">int</span> v<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 价值 </span><span class="token keyword">int</span> f<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// f[i][j], j重量下前i个物品的最大价值 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>       cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>         cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//依次便利每个背包</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  当前重量装不进，价值等于前i-1个物品</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                 f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 能装，需判断 是放这个物品的价值打还是不放这个物品价值大</span>            <span class="token keyword">else</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其是还可以对空间复杂度进行一波优化</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里改用了一维的；</span>        <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>完全背包和01背包的不同之处就是完全背包的每个物品可以被无限次的拿，而01的只能被拿一次；<br>这里我们只说一个优化空间复杂度过的版本，直接看例题吧</p><blockquote><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。<br>第 i 种物品的体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。<br>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。<br><strong>输出格式</strong><br>输出一个整数，表示最大价值。<br><strong>数据范围</strong><br>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000<br><strong>输入样例</strong><br>4 5<br>1 2<br>2 4<br>3 4<br>4 5<br><strong>输出样例：</strong><br>10</p></blockquote><p>01背包是是从大倒下一次遍历背包的容量，这是为了避免重复的那一个值，我我们可以从小到大一次遍历，加入背包的容量为5，第一个物品的价值为2体积为1；当j等一的时候我们遍历了一次，然后dp[1]=2；当j=2时dp[2]=max(dp[2],dp[2-1]+2);这样刚好有取了一遍是不是很巧？我们只要从开始一直遍历到最后就可以了；然后输出dp[V]就可以了；</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> m <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次保留最大的</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><blockquote><p>有 N 种物品和一个容量是 V 的背包。<br>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。<br>接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。<br><strong>输出格式</strong><br>输出一个整数，表示最大价值。<br><strong>数据范围</strong><br>0&lt;N,V≤100<br>0&lt;vi,wi,si≤100<br><strong>输入样例</strong><br>4 5<br>1 2 3<br>2 4 1<br>3 4 3<br>4 5 2<br><strong>输出样例：</strong><br>10</p></blockquote><p>这个是最最基础的多重背包了，我们只需要加上一个循环作为判断就行了</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重量 </span><span class="token keyword">int</span> v<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 价值 </span><span class="token keyword">int</span> s<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 物品数量 </span><span class="token keyword">int</span> f<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// f[i][j], j重量下前i个物品的最大价值 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 背包重量 </span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>         cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历拿几个的时候最大</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p><strong>1的时间复杂度是n<em>m</em>k的如果遇到数据比较就没办法了需要进行优化我们这次说的是二进制优化；</strong></p><blockquote><p>有 N 种物品和一个容量是 V 的背包。<br>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。<br>接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。<br><strong>输出格式</strong><br>输出一个整数，表示最大价值。<br><strong>数据范围</strong><br>0&lt;N≤1000<br>0&lt;V≤2000<br>0&lt;vi,wi,si≤2000<br>提示：<br>本题考查多重背包的二进制优化方法。<br><strong>输入样例</strong><br>4 5<br>1 2 3<br>2 4 1<br>3 4 3<br>4 5 2<br><strong>输出样例：</strong><br>10</p></blockquote><p>这一题如果我们直接暴力搜索那么肯定会超时的，所以需要进行一些优化，emmm什么一次呢，<strong>第一种情况是从0到k每次去不同的数，那么我们能不能想办法将这个过程给优化一波呢？答案是可以的，例如7以内的数我们可以用1,2,4这三个数表示。3=1+2,5=1+4；6=2+4；7=1+2+4，因此我们可以用二进制的性质将k进行优化</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ve<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>v<span class="token operator">>></span>w<span class="token operator">>></span>s<span class="token punctuation">;</span>        ve<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>q<span class="token operator">&lt;</span>s<span class="token punctuation">;</span>q<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将 s 用 二进制的数表示 每次将 q 乘以2，保证是2的整数次方 </span>        <span class="token punctuation">{</span>            s<span class="token operator">-</span><span class="token operator">=</span>q<span class="token punctuation">;</span>            ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//如果最后s有剩余，就单独放入； </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>ve<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token operator">*</span>ve<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历ve中的数据作为01背包，每个数据只会有取和不去的两种选项 </span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>ve<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>v<span class="token punctuation">]</span><span class="token operator">+</span>ve<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>emmm第三种还不是很会，用到的知识是单调队列！有兴趣的可以自己学习一下</p><h1 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h1><p>混合背包就是讲前面的几种情况混合起来了，我们计算的时候只用分类计算就行了，还是之前的问题</p><blockquote><p>有 N 种物品和一个容量是 V 的背包。<br>物品一共有三类：<br>第一类物品只能用1次（01背包）；<br>第二类物品可以用无限次（完全背包）；<br>第三类物品最多只能用 si 次（多重背包）；<br>每种体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。<br>接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。<br>si=−1 表示第 i 种物品只能用1次；<br>si=0 表示第 i 种物品可以用无限次；<br>si&gt;0 表示第 i 种物品可以使用 si 次；<br><strong>输出格式</strong><br>输出一个整数，表示最大价值。<br><strong>数据范围</strong><br>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000<br>−1≤si≤1000<br><strong>输入样例</strong><br>4 5<br>1 2 -1<br>2 4 1<br>3 4 0<br>4 5 2<br><strong>输出样例：</strong><br>8</p></blockquote><p>这一题直接分类计算就行了</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>ve<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>w<span class="token operator">>></span>v<span class="token operator">>></span>s<span class="token punctuation">;</span>        ve<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果是多重的用二进制进行优化</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>s<span class="token punctuation">;</span>p<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token operator">=</span>s<span class="token operator">-</span>p<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> ve<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//完全背包</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>w<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//多重背包</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>ve<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span>w<span class="token operator">*</span>ve<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token operator">*</span>ve<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>ve<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//01背包</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">>=</span>w<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h1><p>其实二维费用背包也是很简单的就是将滚动数组多开一维用来分别存储体积和质量罢了！</p><blockquote><p>有 N 件物品和一个容量是 V 的背包，背包能承受的最大重量是 M。<br>每件物品只能用一次。体积是 vi，重量是 mi，价值是 wi。<br>求解将哪些物品装入背包，可使物品总体积不超过背包容量，总重量不超过背包可承受的最大重量，且价值总和最大。<br>输出最大价值。<br><strong>输入格式</strong><br>第一行两个整数，N，V,M，用空格隔开，分别表示物品件数、背包容积和背包可承受的最大重量。<br>接下来有 N 行，每行三个整数 vi,mi,wi，用空格隔开，分别表示第 i 件物品的体积、重量和价值。<br><strong>输出格式</strong><br>输出一个整数，表示最大价值。<br><strong>数据范围</strong><br>0&lt;N≤1000<br>0&lt;V,M≤100<br>0&lt;vi,mi≤100<br>0&lt;wi≤1000<br><strong>输入样例</strong><br>4 5 6<br>1 2 3<br>2 4 4<br>3 4 5<br>4 5 6<br><strong>输出样例：</strong><br>8</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>V<span class="token punctuation">,</span>M<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>m<span class="token punctuation">,</span>w<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>V<span class="token operator">>></span>M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>v<span class="token operator">>></span>w<span class="token operator">>></span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//两个循环分别遍历体积的质量遍历的规则和一维的一样</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>M<span class="token punctuation">;</span>k<span class="token operator">>=</span>w<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="背包问题求方案数"><a href="#背包问题求方案数" class="headerlink" title="背包问题求方案数"></a>背包问题求方案数</h1><p>这类问题我们只需要再开一个数组标记方案书就行了中间有点小细节注意一下</p><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。<br>第 i 件物品的体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出 最优选法的方案数。注意答案可能很大，请输出答案模 109+7 的结果。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。<br>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。<br>输出格式<br>输出一个整数，表示 方案数 模 109+7 的结果。<br><strong>数据范围</strong><br>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000<br><strong>输入样例</strong><br>4 5<br>1 2<br>2 4<br>3 4<br>4 6<br><strong>输出样例：</strong><br>2</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1090</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span><span class="token number">1090</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>v<span class="token punctuation">,</span>V<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>V<span class="token punctuation">;</span>    flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>v<span class="token operator">>></span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">>=</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>               <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还和之前的一样遍历只是中间需要记录路径数所以不能直接赋值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token operator">+</span><span class="token operator">=</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当t=dp[j]时s加上flag【j】</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span> s<span class="token operator">=</span>s<span class="token operator">+</span>flag<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当t=dp[j-v]+m时s加上flag[j-v]</span>            flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意取mod 只是因为  有可能两种不同的路径取出来的最大值是相同的</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> maxn<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历最大值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>V<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>maxn<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路径相加</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="背包问题求具体方案"><a href="#背包问题求具体方案" class="headerlink" title="背包问题求具体方案"></a>背包问题求具体方案</h1><p>这个问题看上去和上一个很像但是区别还是不小的吧</p><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。<br>第 i 件物品的体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出 字典序最小的方案。这里的字典序是指：所选物品的编号所构成的序列。物品的编号范围是 1…N。<br><strong>输入格式</strong><br>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。<br>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。<br><strong>输出格式</strong><br>输出一行，包含若干个用空格隔开的整数，表示最优解中所选物品的编号序列，且该编号序列的字典序最小。<br>物品编号范围是 1…N。<br><strong>数据范围</strong><br>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000<br><strong>输入样例</strong><br>4 5<br>1 2<br>2 4<br>3 4<br>4 6<br><strong>输出样例：</strong><br>1 4</p></blockquote><p>用一个标记数组进行标记然后从大到小遍历，每次标记被取得，然后再从小到大进行查找</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//因为需要标记所以用二维的数组进行储存</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">==</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果满足条件就进行输出</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            m<span class="token operator">-</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行查找下一个位置，这个节点连接的，可能有点难理解自己画个图模拟一遍就可以了</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="有依赖的背包问题"><a href="#有依赖的背包问题" class="headerlink" title="有依赖的背包问题"></a>有依赖的背包问题</h1><p>这个是真不会还用到了树形dp，分组背包，emmm以后再补吧</p>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包九讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ-2585-Window Pains</title>
      <link href="/2019/07/28/POJ-2585-Window%20Pains/"/>
      <url>/2019/07/28/POJ-2585-Window%20Pains/</url>
      
        <content type="html"><![CDATA[<h1 id="POJ-2585-Window-Pains"><a href="#POJ-2585-Window-Pains" class="headerlink" title="POJ-2585-Window Pains"></a>POJ-2585-Window Pains</h1><center> Window Pains</center><center>Time Limit: 1000MS    Memory Limit: 65536K</center><center>Total Submissions: 2915        Accepted: 1461</center><p><strong>Description</strong></p><blockquote><p>&emsp;Boudreaux likes to multitask, especially when it comes to using his computer. Never satisfied with just running one application at a time, he usually runs nine applications, each in its own window. Due to limited screen real estate, he overlaps these windows and brings whatever window he currently needs to work with to the foreground. If his screen were a 4 x 4 grid of squares, each of Boudreaux’s windows would be represented by the following 2 x 2 windows:<br>               <center><img src="https://i.loli.net/2019/07/28/5d3d79082a30f43440.png" alt></center><br>When Boudreaux brings a window to the foreground, all of its squares come to the top, overlapping any squares it shares with other windows. For example, if window 1and then window 2 were brought to the foreground, the resulting representation would be:<br>1    2    2    ?<br>1    2    2    ?<br>?    ?    ?    ?<br>?    ?    ?    ?<br>If window 4 were then brought to the foreground:<br>1    2    2    ?<br>4    4    2    ?<br>4    4    ?    ?<br>?    ?    ?    ?<br>. . . and so on . . .<br>Unfortunately, Boudreaux’s computer is very unreliable and crashes often. He could easily tell if a crash occurred by looking at the windows and seeing a graphical representation that should not occur if windows were being brought to the foreground correctly. And this is where you come in . . .<br>Input</p></blockquote><blockquote><p>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. </p></blockquote><blockquote><p>A single data set has 3 components:<br>Start line - A single line:<br>START </p></blockquote><blockquote><p>Screen Shot - Four lines that represent the current graphical representation of the windows on Boudreaux’s screen. Each position in this 4 x 4 matrix will represent the current piece of window showing in each square. To make input easier, the list of numbers on each line will be delimited by a single space.<br>End line - A single line:<br>END </p></blockquote><blockquote><p>After the last data set, there will be a single line:<br>ENDOFINPUT </p></blockquote><blockquote><p><strong>Note</strong> that each piece of visible window will appear only in screen areas where the window could appear when brought to the front. For instance, a 1 can only appear in the top left quadrant.<br>Output</p></blockquote><blockquote><p>For each data set, there will be exactly one line of output. If there exists a sequence of bringing windows to the foreground that would result in the graphical representation of the windows on Boudreaux’s screen, the output will be a single line with the statement: </p></blockquote><blockquote><p>THESE WINDOWS ARE CLEAN<br>Otherwise, the output will be a single line with the statement:<br>THESE WINDOWS ARE BROKEN </p></blockquote><p><strong>Sample Input</strong></p><pre class=" language-c"><code class="language-c">START<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">9</span><span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">9</span>ENDSTART<span class="token number">1</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span><span class="token number">7</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">9</span><span class="token number">7</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">9</span>ENDENDOFINPUT</code></pre><p><strong>Sample Output</strong></p><pre class=" language-c"><code class="language-c">THESE WINDOWS ARE CLEANTHESE WINDOWS ARE BROKEN </code></pre><p>不得不说Poj的题就是难，想了好久但是可算有点思路了，结果交了一发，直接Wa，这谁受得了呀，后来找了好几篇博客才看明白，因为每个方格都会有一组固定的几个数，<strong>我们事先将每个方格里面的数打标打出来，然后在输入图形的时候进行处理，输入的谁，谁就就大于其他值，例如：(3,3)这个位置，可能出现的数字是：5,6,8,9；如果在输入的时候，输入的是8，那就在构建拓排图的时候让8&gt;6,8&gt;6,8&gt;9;遇到自身的话就跳过，这样构好图后就按照平常的拓排进行跑就行了，只有又环的出现那么久不满足情况</strong>，另外要<strong>注意去重</strong>，应为方格的情况可能冲突所以要注意去重；</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> pa<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> in<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>pa<span class="token operator">></span>se<span class="token punctuation">;</span><span class="token keyword">int</span> mmp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//前两个4表示的是位置，第几行第几列，最后一个6表示里面可能有的数字，                                                </span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注意我的每一个开始的数字是表示这个位置可能有几个数字</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这样的话方便以后的构图</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//大概的构造图形，把每个点的大小关系都放进set，进行去重;</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mmp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> xx<span class="token operator">=</span>mmp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token operator">!=</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果相等就不放进去</span>        <span class="token punctuation">{</span>            se<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"ENDOFINPUT"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//    数据初始化，很重要！！！</span>        se<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cin<span class="token operator">>></span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">gt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行大小关系的确定</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cin<span class="token operator">>></span>s<span class="token punctuation">;</span>        pa p<span class="token punctuation">;</span>        set<span class="token operator">&lt;</span>pa<span class="token operator">></span><span class="token punctuation">:</span><span class="token punctuation">:</span>iterator it<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从set里面取数，然后开始正式的构建拓排有向图</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>se<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>se<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>p<span class="token punctuation">.</span>first <span class="token punctuation">;</span>            <span class="token keyword">int</span> y<span class="token operator">=</span>p<span class="token punctuation">.</span>second <span class="token punctuation">;</span>            v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//入度加一</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查找入度为零的节点,从入度为零的节点开始删除</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拓排删除节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                in<span class="token punctuation">[</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//都一个节点度数减少一</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果k最后不等0，说明还有节点没被删除，也就是说形成了环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"THESE WINDOWS ARE BROKEN"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"THESE WINDOWS ARE CLEAN"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPU第二次积分赛</title>
      <link href="/2019/07/28/HPU%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%A7%AF%E5%88%86%E8%B5%9B/"/>
      <url>/2019/07/28/HPU%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%A7%AF%E5%88%86%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://hpuoj.com/contest/23/" target="_blank" rel="noopener">题目链接</a></strong></p><h1 id="A-再战斐波那契"><a href="#A-再战斐波那契" class="headerlink" title="A. 再战斐波那契"></a>A. 再战斐波那契</h1><blockquote><p>单点时限: 1.0 sec<br>内存限制: 512 MB</p></blockquote><blockquote><p>小z 学会了斐波那契和 gcd 后，老师又给他出了个难题，求第N个和第M个斐波那契数的最大公约数，这可难倒了小z ，不过在小z 的再三请求下，老师又告诉他了个条件，gcd(N,M)∈[1,90]。<br>可是，笨拙的小z 还是不会，于是请求你帮他解答这个问题。</p></blockquote><p><strong>已知:</strong><br>$$Fibonacci[i]==<br>\begin{cases}<br>i&amp; \text{x&lt;=1}\<br>Fibonacci[i−1]+Fibonacci[i−2]&amp; \text{x&gt;1}<br>\end{cases}$$<br><strong>输入格式</strong><br>输入包括 T 组，T∈[1,10].<br>接下来 T 行,每行两个整数 N,M, 表示斐波那契的第 N 项和第 M 项，(N,M∈[1,1018]).<br><strong>输出格式</strong><br>输出包含 T 行,每行输出一个整数.<br><strong>样例</strong></p><p>Input</p><blockquote><p>3<br>1 2<br>2 3<br>3 4</p></blockquote><p>Output</p><blockquote><p>1<br>1<br>1</p></blockquote><p>这个题比赛时想了一会我去咋这么难，第一题就要用大数？？？结果发现我真的傻逼了，这个规律题真的还不错<strong>斐波那契的第N项和第M项的gcd就等于N和M的gcd的那一项对应的斐波那切数</strong>比如第4(3)项和第8(21)项的的gcd就等于gcd(4,8)的那一项也就是第2项3；<br>另外注意 <strong>long long 好像可以存到92项，unsigned long long可以存到93项</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">94</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>       a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       ll t<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>t<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>              cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token function">__gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="B-恐怖的怪物"><a href="#B-恐怖的怪物" class="headerlink" title="B. 恐怖的怪物"></a>B. 恐怖的怪物</h1><blockquote><p>单点时限: 5.0 sec<br>内存限制: 512 MB</p></blockquote><blockquote><p>一天早上，Dicer一觉醒来，发现自己来到了MineCraft的世界里面，身为MineCraft游戏爱好者的他欣喜不已，于是他在地下挖了一片长方体的空间作为秘密基地，可是他发现光照亮度小于等于7时，会有恐怖的怪物出现，并且他通过查阅资料发现光源方块产生光照每一米（方格）衰减1光照等级。<br>&emsp;此规律在坐标轴的3个方向上（东西、南北、上下）均成立。换句话来说，对角线方向的光照衰减依照“曼哈顿距离”（两个点在坐标系上的绝对轴距总和）计算。这意味着，假如地上插着一支火把（光照等级14），则在水平面上与火把相邻的4个方向的方格上光照等级均为13，而在水平面上与火把对角的4个方格上光照等级均为12（譬如，西北方格的光照等级为14-向西1级-向北1级）。<br>&emsp;上述这种衰减特性会在光源周围产生菱形的照明。该效果会在光源周围的光源扩散呈钻石状。如果被不透明方块阻挡，光照也可以沿着复杂而弯曲的路径扩散。<br>如下图所示，红色为光源（亮度等级为14）,黑色为秘密物品，其余各个位置光照强度如图所示。                                                                                                                                                                                            <center> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDcvMjcvNWQzYzZhMjg0NWQ4ZTkyMjc0LnBuZw" alt></center></p>&emsp;秘密基地为N∗M的空间，不考虑高度，初始地面光照强度为0。为了不生成恐怖的怪物，Dicer布置了一些光源，但他不知道是否仍会生成怪物，现在请你帮助Dicer判断。</blockquote><blockquote><p><strong>注：</strong>光源及秘密物品均为不透明方块，且其上方均不会生成怪物。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行是一个T。（1≤T≤100）<br>接下来有T组数据，每一组第一行是N,M,（1≤N,M≤1000）,接下来有N行，每行M个字符，代表秘密基地地面放置的方块，0代表空气，#代表秘密物品，Y代表萤石(光照等级为15)，H代表火把(光照等级为14)，F代表附魔台(光照等级为12)，R代表激活的红石火把(光照等级为7)。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出包含T行，每行如果仍会生成怪物，输出”Yes”,否则输出”No”</p></blockquote><p><strong>样例</strong></p><blockquote><p>Input</p><pre class=" language-c"><code class="language-c"><span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span>0Y0<span class="token number">00</span>#<span class="token number">3</span> <span class="token number">4</span>R00#00R00R00</code></pre><p><strong>Output</strong><br><code>No</code><br><code>Yes</code><br><strong>Input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">2</span><span class="token number">1</span> <span class="token number">5</span>0Y0R0<span class="token number">2</span> <span class="token number">4</span>Y#0R<span class="token number">0000</span></code></pre><p><strong>Output</strong><br><code>Yes</code><br><code>No</code><br><strong>Input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">1</span><span class="token number">5</span> <span class="token number">4</span>Y0F0<span class="token number">0000</span><span class="token number">0000</span><span class="token number">0000</span><span class="token number">0000</span></code></pre><p><strong>Output</strong><br><code>No</code><br>这道题看着我都头痛补都不想补！比赛的时候看见了感觉就是跑bfs但是发自内心的不想写，唉！以后要改改这个坏毛病了不能再这样了！不过这个题也要注意！<strong>光源，神秘物体是不能透过光的所以一遇到不是“0”的都不能放进队列里面，队列还要用优先队列！真是麻烦</strong>GYH学长真毒瘤！！！</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  ull<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">char</span> mmp<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存图</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存光照强度</span>bool flag<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作为标记</span><span class="token keyword">struct</span> pe<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span>    bool friend operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span>pe x<span class="token punctuation">,</span>pe y<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//规定一下排列顺序</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">.</span>s<span class="token operator">&lt;</span>y<span class="token punctuation">.</span>s <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cc<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>pe<span class="token operator">></span>q<span class="token punctuation">;</span>bool <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    c<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        c<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>c<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span>c<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token operator">=</span>c<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意这里只有mmp[x][y]=='0'；才能放入队列；        </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>mmp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">&lt;</span>c<span class="token punctuation">.</span>s<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">.</span>s <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                cc<span class="token punctuation">.</span>x <span class="token operator">=</span>x<span class="token punctuation">;</span>cc<span class="token punctuation">.</span>y <span class="token operator">=</span>y<span class="token punctuation">;</span>cc<span class="token punctuation">.</span>s <span class="token operator">=</span>c<span class="token punctuation">.</span>s <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断是不是满足条件</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> mp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cin<span class="token operator">>></span>mmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//存图并且提前判断一下光照强度标记光源和记录强度</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>mmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//flag[i][j]=1;</span>                        c<span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>c<span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>c<span class="token punctuation">.</span>s <span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//flag[i][j]=1;</span>                        c<span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>c<span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>c<span class="token punctuation">.</span>s <span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'R'</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//flag[i][j]=1;</span>                        c<span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>c<span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>c<span class="token punctuation">.</span>s <span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'F'</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//flag[i][j]=1;</span>                        c<span class="token punctuation">.</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>c<span class="token punctuation">.</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>c<span class="token punctuation">.</span>s <span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="C-连连看"><a href="#C-连连看" class="headerlink" title="C. 连连看"></a>C. 连连看</h1><blockquote><p>单点时限: 3.0 sec<br>内存限制: 512 MB</p></blockquote><p>&emsp;众所周知，《连连看》是一个老少皆宜的游戏。<br>《连连看》是由黄兴武创作的一款PC端益智类游戏，只要将相同的两张牌用三根以内的线段连在一起就可以消除，规则简单容易上手。</p><p>&emsp;现在呢，Boctorio学长突然想玩连连看了，但不是单纯的玩游戏，他想自己出一局连连看。<br>由于Boctorio学长是一个蒟蒻，他不知道自己出的连连看是否符合能够通过多次操作将其全部消除，所以想要你帮他检查一下他出的连连看是否符合规则。</p><p><strong>输入格式</strong></p><blockquote><p>第一行输入个T,表示T组数据（1≤t≤100）<br>每组数据第一行两个数 n,m ,表示连连看棋盘的长和宽（1≤n,m≤100）<br>接下来 n 行，每行输入 m 个正整数aij，表示 m 个棋子 (1≤aij≤n∗m)。<br>每种棋子只会出现一对，因此数据保证只有一种有效结果。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>每组数据输出一行。<br>如果棋盘符合规定，输出”Yes”，否则，输出”No”（不包括引号）。<br>样例</p></blockquote><p><strong>Input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span><span class="token number">2</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">1</span><span class="token number">4</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">5</span><span class="token number">4</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span><span class="token number">8</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">8</span><span class="token number">5</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span></code></pre><p><strong>Output</strong><br><code>No</code><br><code>No</code><br><code>Yes</code></p><p>emmmmm这个题之前写过一个简单的但是现在还是不会以后再补吧…</p><h1 id="D-Points-in-rectangle"><a href="#D-Points-in-rectangle" class="headerlink" title="D. Points in rectangle"></a>D. Points in rectangle</h1><blockquote><p>单点时限: 2.0 sec<br>内存限制: 512 MB</p></blockquote><p>&emsp;在二维平面中有一个矩形，它的四个坐标点分别为(0,a),(a,0),(n,n−a),(n−a,n)。你现在有m个点，现在你想知道有多少个点是在这个矩形内的(边上的也算)。</p><p><strong>输入格式</strong></p><blockquote><p>第一行输入n,a(1≤a&lt;n≤103)。<br>第二行一个正整数m(1≤m≤103),代表你拥有的点的个数，接下来m行，每行一个点的坐标xi,yi(1≤xi,yi≤103)。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>第一行输出在矩形内的点的个数，然后输出在矩形内点的坐标，横坐标大的优先，如果横坐标相同，则纵坐标大的优先。如果没有，输出−1。<br>样例</p></blockquote><p><strong>Input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">6</span> <span class="token number">1</span><span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">4</span> <span class="token number">5</span></code></pre><p><strong>Output</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">4</span><span class="token number">4</span> <span class="token number">5</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span></code></pre><p>这个题看上去很难但是仔细想想画画图也就那么回事，不过我很傻逼的吧x.x!=y.x打成 y.y了Wa了一发感觉也是个水题。。。还是自己太菜了</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> pa<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">struct</span> pe<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>S<span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>pe x<span class="token punctuation">,</span>pe y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>x <span class="token operator">!=</span>y<span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>x <span class="token operator">></span>y<span class="token punctuation">.</span>x <span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>y <span class="token operator">></span>y<span class="token punctuation">.</span>y <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>        cin<span class="token operator">>></span>k<span class="token punctuation">;</span>        <span class="token keyword">int</span> bb<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span>m<span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>            <span class="token keyword">int</span> w<span class="token operator">=</span>y<span class="token operator">-</span>x<span class="token operator">-</span>m<span class="token punctuation">,</span>q<span class="token operator">=</span>y<span class="token operator">-</span>x<span class="token operator">+</span>m<span class="token punctuation">;</span>            <span class="token keyword">int</span> r<span class="token operator">=</span>y<span class="token operator">+</span>x<span class="token operator">-</span>m<span class="token punctuation">,</span>s<span class="token operator">=</span>y<span class="token operator">+</span>x<span class="token operator">-</span>bb<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>w<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                S<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span>x<span class="token punctuation">;</span>                S<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>S<span class="token operator">+</span>t<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>t<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="E-Numbers-of-interval"><a href="#E-Numbers-of-interval" class="headerlink" title="E. Numbers of interval"></a>E. Numbers of interval</h1><blockquote><p>单点时限: 2.0 sec<br>内存限制: 512 MB</p></blockquote><p>现在有一个数组，请计算有多少的区间 [l,r] (l≤r)满足 a[i]$\sum_l^r$&gt;i ≥k;<br><strong>输入格式</strong></p><blockquote><p>第一行输入n,k(1≤n,k≤106).<br>接下来输入n个数，第i个数为ai(1≤ai≤103).</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出满足条件的区间个数</p></blockquote><p><strong>样例</strong><br><strong>Input</strong></p><pre class=" language-c"><code class="language-c"><span class="token number">3</span> <span class="token number">5</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span></code></pre><p><strong>Output</strong><br><code>4</code><br>这个题我感觉是这次出的最有意思的题！这个思路是<strong>用sum一直加，一旦结果大于等于K；ant=n-i那就从对一项减，如果sum还大于K那就再加；接着减，记得不能回头减，如果这次减到第二项了，那么下次一定要从第三项开始</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> pa<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    ll ast<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化，记录有几种方案</span>    ll k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前几项的累加</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果大于m就开始减；</span>            <span class="token punctuation">{</span>               ast<span class="token operator">+</span><span class="token operator">=</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最多减到当前位置；</span>             <span class="token punctuation">{</span>                 sum<span class="token operator">-</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">>=</span>m<span class="token punctuation">)</span> ast<span class="token operator">+</span><span class="token operator">=</span>n<span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果依旧满足条件那么就一直加；</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            cout<span class="token operator">&lt;&lt;</span>ast<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="I-Same-String"><a href="#I-Same-String" class="headerlink" title="I. Same String"></a>I. Same String</h1><blockquote><p>单点时限: 2.0 sec<br>内存限制: 512 MB</p></blockquote><blockquote><p>&emsp;有两个只由小写字母组成的长度为n的字符串s1,s2和m组字母对应关系，每一组关系由两个字母c1和c2组成，代表c1可以直接变成c2,你需要判断s1是否可以通过这m组关系转换为s2。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行输入一个n(1≤n≤100)，代表字符串的长度。<br>第二行和第三行输入两个字符串s1,s2。<br>第四行输入一个m(1≤m≤325)，代表有m组关系。<br>接下来m行，第i行两个字符ui,vi,代表ui可以直接变为vi。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>如果s1可以通过这些m组关系转化变为s2，输出”YES”，否则输出”NO”。</p></blockquote><p><strong>样例</strong><br>Input</p><pre class=" language-c"><code class="language-c"><span class="token number">6</span>aabbcccdbcad<span class="token number">4</span>a cc aa db c</code></pre><p><strong>Output</strong><br><code>YES</code><br><strong>提示</strong><br>可以转换多次，比如a可以转换为b，而b可以转换为c，则a可以转换为c。<br>样例一：aabbcc-&gt;cabbcc-&gt;cdbbcc-&gt;cdbccc-&gt;cdbcac-&gt;cdbcaa-&gt;cdbcad</p><p>这个题我看见的第一反应是直接暴力因为按最坏的复杂度也不会TLE于是就直接莽了一发！结果还真过了！！！</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> pa<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aa<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool flag<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每次都要初始化！！！</span>    <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> xx<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> qq<span class="token operator">=</span>v<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>qq<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>qq<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag<span class="token punctuation">[</span>qq<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    ios::sync_with_stdio(false);</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">char</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c %c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> A<span class="token operator">=</span>x<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">int</span> B<span class="token operator">=</span>y<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存入邻接表</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> fa<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">,</span>aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每次判断</span>                fa<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//这里附加一份华佬的代码，用了另一个算法，还是比较巧的，华佬真强！！！</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">,</span>d<span class="token punctuation">;</span><span class="token keyword">int</span> ma<span class="token punctuation">[</span><span class="token number">330</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">330</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> s1 <span class="token operator">>></span> s2 <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> c <span class="token operator">>></span> d<span class="token punctuation">;</span>        ma<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ma<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ma<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> ma<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ma<span class="token punctuation">[</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"YES\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HPU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HPU第二次积分赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的直径</title>
      <link href="/2019/07/25/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
      <url>/2019/07/25/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Farthest-Nodes-in-a-Tree"><a href="#Farthest-Nodes-in-a-Tree" class="headerlink" title="Farthest Nodes in a Tree"></a>Farthest Nodes in a Tree</h1><blockquote><p>   Given a tree (a connected graph with no cycles), you have to find the farthest nodes in the tree. The edges of the tree are weighted and undirected. That means you have to find two nodes in the tree whose distance is maximum amongst all nodes.</p></blockquote><blockquote><p> Input<br>    starts with an integer T (≤ 10), denoting the number of test cases. Each case starts with an integer n (2 ≤ n ≤ 30000) denoting the total number of nodes in the tree. The nodes are numbered from 0 to n-1. Each of the next n-1 lines will contain three integers u v w (0 ≤ u, v &lt; n, u ≠ v, 1 ≤ w ≤ 10000) denoting that node u and v are connected by an edge whose weight is w. You can assume that the input will form a valid tree.</p></blockquote><blockquote><p>Output</p></blockquote><blockquote><p>For each case, print the case number and the maximum distance.</p></blockquote><p>Sample Input</p><pre class=" language-code"><code class="language-code">    2    4    0 1 20    1 2 30    2 3 50    5    0 2 20    2 1 10    0 3 29    0 4 50</code></pre><p>  Sample Output</p><pre class=" language-code"><code class="language-code">    Case 1: 100    Case 2: 80</code></pre><p>这个题刚开始一直不理解，可能是对树的的直径比较陌生吧，可后来看看了看学长给我板子。我去咋这么简单emmm，我真是个智障呀。<strong>只要从任意一个节点出发然后找到距离他最远的节点，然后再让这个最远的出发去找距离这个最远的，这两个节点的距离就是树的直径！</strong><br>这就是一个简单的板子题</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> pa<span class="token punctuation">;</span>bool flag<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> step<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pa<span class="token operator">></span>v<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> yy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> xx<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token operator">></span>sum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum<span class="token operator">=</span>step<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">;</span>            yy<span class="token operator">=</span>xx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pa p<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span>v<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y<span class="token operator">=</span>p<span class="token punctuation">.</span>first <span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                flag<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                step<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>step<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> yy<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>n<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                 v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>                v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双向存储便于查找</span>                 v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="E-Computer"><a href="#E-Computer" class="headerlink" title="E-Computer"></a>E-Computer</h1><blockquote><p>描述<br>    一所学校不久前买了第一台电脑（所以这台电脑的ID是1）。近年来，学校购买了N-1新电脑。每台新电脑都连接到一台先前安装的电脑上。学校的管理人员担心网络运行缓慢，希望知道第i台计算机需要发送信号的最大距离si（即到最远计算机的电缆长度）。您需要提供此信息。<br>    <center><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDcvMjUvNWQzOWM5Y2UwZTAwOTUyNTc1LmpwZw" alt="111.jpg"></center></p></blockquote><blockquote><p>提示：示例输入与此图对应。从图中，你可以看到计算机4离1最远，所以s1=3。计算机4和5是距离2最远的，所以s2=2。计算机5是离3最远的，所以s3=3。我们也得到了s4=4，s5=4。</p></blockquote><blockquote><p>输入<br>    输入文件包含多组测试样例。在每组样例中，第一行中都有自然数n（n&lt;=10000），然后是（n-1）行，其中包含对计算机的描述。第i行包含两个自然数-第i计算机所连接的计算机和用于连接的电缆长度。电缆总长度不超过10^9。输入行中的数字用空格分隔。</p></blockquote><blockquote><p>输出<br>    对于每组样例，输出n行。第i行第i台计算机的到其他计算机的最大长度Si（1&lt;=i&lt;=n）。</p></blockquote><blockquote><p>样例输入</p><pre><code>    5    1 1    2 1    3 1    1 1</code></pre><p>样例输出</p><pre><code>    3    2    3    4    4</code></pre><p>提示<br> 示例输入与此图对应。从图中，你可以看到计算机4离1最远，所以s1=3。计算机4和5是距离2最远的，所以s2=2。计算机5是离3最远的，所以s3=3。我们也得到了s4=4，s5=4。</p></blockquote><p>这个一看见就直接蒙圈了Woc这咋搞，想了好久还是csdn了，<strong>从一个点出发寻找到距离它最远的点，然后在从这个点出发寻找距离它最远的点中间记录每个节点的最远路程，这样算的的路径都是距离该节点的最远路径，然后再从距离这个点的最远的点在进行dfs还更新节点距离，那么最后的结果就是了</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> pa<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>maxlen<span class="token punctuation">,</span>s<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>pa<span class="token operator">></span>v<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>maxlen<span class="token operator">&lt;=</span>l<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxlen<span class="token operator">=</span>l<span class="token punctuation">;</span>        s<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pa p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>first <span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>first <span class="token punctuation">,</span>x<span class="token punctuation">,</span>l<span class="token operator">+</span>p<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>p<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>p<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token operator">+</span>p<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> dp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>            v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        maxlen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        maxlen<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 树的直径 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF-1197C-C. Array Splitting</title>
      <link href="/2019/07/23/CF-1197C-C.%20Array%20Splitting/"/>
      <url>/2019/07/23/CF-1197C-C.%20Array%20Splitting/</url>
      
        <content type="html"><![CDATA[<h1 id="CF-1197C-C-Array-Splitting"><a href="#CF-1197C-C-Array-Splitting" class="headerlink" title="CF-1197C-C. Array Splitting"></a>CF-1197C-C. Array Splitting</h1><blockquote><center>C. Array Splitting</center><center>time limit per test2 seconds<center>memory limit per test256 megabytes<center>inputstandard input<center>outputstandard output</center></center></center></center></blockquote><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You are given a sorted array a1,a2,…,an (for each index i&gt;1 condition ai≥ai−1 holds) and an integer k.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You are asked to divide this array into k non-empty consecutive subarrays. Every element in the array should be included in exactly one subarray.</p></blockquote><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Let max(i) be equal to the maximum in the i-th subarray, and min(i) be equal to the minimum in the i-th subarray. The cost of division is equal to ∑i=1k(max(i)−min(i)). For example, if a=[2,4,5,5,8,11,19] and we divide it into 3 subarrays in the following way: [2,4],[5,5],[8,11,19], then the cost of division is equal to (4−2)+(5−5)+(19−8)=13.<br>Calculate the minimum cost you can obtain by dividing the array a into k non-empty consecutive subarrays.</p></blockquote><blockquote><p>Input<br>The first line contains two integers n and k (1≤k≤n≤3⋅105).<br>The second line contains n integers a1,a2,…,an (1≤ai≤109, ai≥ai−1).</p></blockquote><blockquote><p>Output<br>Print the minimum cost you can obtain by dividing the array a into k nonempty consecutive subarrays.</p></blockquote><blockquote><p>Examples<br>input<br>6 3<br>4 8 15 16 23 42<br>output<br>12<br>input<br>4 4<br>1 3 3 7<br>output<br>0<br>input<br>8 1<br>1 1 2 3 5 8 13 21<br>output<br>20<br><strong>Note</strong><br>In the first test we can divide array a in the following way: [4,8,15,16],[23],[42].<br><a href="http://codeforces.com/problemset/problem/1197/C" target="_blank" rel="noopener"><strong>题目传送门</strong></a><br>&nbsp;&nbsp;刚开始这一题我一时不会写有点思路但是就是写不出来好难受呀！后来还是问我师傅了！<br>结果发现还是一个贪心，因为他需要最小值所以每次先把距离最大的删除那么结果不就是最小了，先依次作差，然后<strong>sort</strong>排序从大到小依次减去k-1个数就行！剩下的就是答案了</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">300300</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">300300</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用数组B存差值； </span>            sum<span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//先求差值之和最后再减； </span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token number">-1</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从大到小排序 </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从大到小开始删除 </span>        <span class="token punctuation">{</span>            sum<span class="token operator">-</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出剩余的结果 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HPU第一次积分赛 E.Max Gcd</title>
      <link href="/2019/07/22/HPU%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%A7%AF%E5%88%86%E8%B5%9B%20E.Max%20Gcd/"/>
      <url>/2019/07/22/HPU%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%A7%AF%E5%88%86%E8%B5%9B%20E.Max%20Gcd/</url>
      
        <content type="html"><![CDATA[<p>E. Max Gcd</p><blockquote><p>单点时限: 2.0 sec<br>内存限制: 512 MB</p></blockquote><blockquote><p>一个数组a，现在你需要删除某一项使得它们的gcd最大，求出这个最大值。</p></blockquote><blockquote><p><strong>输入格式</strong><br>第一行输入一个正整数n，表示数组的大小，接下来一行n个数，第i个数为ai。(2≤n≤105,1≤ai≤109)</p></blockquote><blockquote><p><strong>输出格式</strong><br>输出删除掉某个数以后的gcd的最大值。</p></blockquote><blockquote><p><strong>样例</strong></p></blockquote><blockquote><p>input<br>4<br>2 4 8 1<br>outpu|<br>2</p></blockquote><blockquote><p>input<br>4<br>1 2 3 4</p></blockquote><blockquote><p>output<br>1</p></blockquote><p><strong>提示</strong><br>样例一：删除第四个元素后，2,4,8的最大公因子为2。<br>样例二：无论删除哪一个，最大公因子都为1。</p><p>这个题刚开始想着直接暴力，后来发现时间不允许就放弃了，赛后我是师父说直接先把数组从前到后依次gcd存在一个数组里，然后在从后向前依次gcd再放另一个数组里，然后在直接暴力就行了！<br><img src="https://img-blog.csdnimg.cn/20190720181632611.png" alt="不会使用作图工具大佬们见谅"><br>红线代表从前向后依次gcd，蓝线是从后向前。然后一个一个去除保留最大的数据就行！</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">100100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">__gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从前向后依次gcd</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">__gcd</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从后向前依次gcd</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为防止数组下标越界所以事先比较去掉第一项和</span>                            <span class="token comment" spellcheck="true">//去掉最后一项哪个大，保留打的一个</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b[i-1]和c[i+1]刚好是第i项之前的所有项的gcd和第i项之后的所有项的gcd    </span>        maxn<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">__gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>maxn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为一直保留的是最大的值，所以最后的maxn就是答案</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>maxn<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HPU </category>
          
          <category> Gcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HPU第一次积分赛 </tag>
            
            <tag> Gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU-1811-Rank of Tetris</title>
      <link href="/2019/07/22/HDU-1811-Rank%20of%20Tetris/"/>
      <url>/2019/07/22/HDU-1811-Rank%20of%20Tetris/</url>
      
        <content type="html"><![CDATA[<p>#HDU-1811-Rank of Tetris<br><strong>HDU-1811-Rank of Tetris</strong></p><blockquote><p>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p></blockquote><blockquote><p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p></blockquote><blockquote><p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。<br>同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p></blockquote><blockquote><p>现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出”OK”。否则就请你判断出错的原因，到底是因为信息不完全（输出”UNCERTAIN”），还是因为这些信息中包含冲突（输出”CONFLICT”）。<br>注意，如果信息中同时包含冲突且信息不完全，就输出”CONFLICT”。</p></blockquote><blockquote><p>本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含两个整数N,M(0&lt;=N&lt;=10000,0&lt;=M&lt;=20000),分别表示要排名的人数以及得到的关系数。<br>接下来有M行，分别表示这些关系</p></blockquote><blockquote><p>对于每组测试，在一行里按题目要求输出</p></blockquote><blockquote><p>Sample Input</p></blockquote><blockquote><p>3 3<br>0 &gt; 1<br>1 &lt; 2<br>0 &gt; 2<br>4 4<br>1 = 2<br>1 &gt; 3<br>2 &gt; 0<br>0 &gt; 1<br>3 3<br>1 &gt; 0<br>1 &gt; 2<br>2 &lt; 1</p></blockquote><blockquote><p>Sample Output</p></blockquote><blockquote><p>OK<br>CONFLICT<br>UNCERTAIN</p></blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1811" target="_blank">题目链接</a><br>&#8195;今天刚学了拓扑排序，之前写了<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1285" target="_blank">HDU-1285</a>感觉还可以，到那时一遇到这个题就蒙圈了，想了好久（找了好多大佬的博客才搞懂），<br>&#8195;这个题关键是如何处理节点的边；因为直接建图的话数据太大所以我们需要用vector来存图，如果遇到等号我们就用并查集处理成一个单元，然后&gt;或&lt;就分别设为vector的前端后后端。再结合队列进行节点的删减；<br><em>注意</em><br><strong>当处理到最后还有节点未处理说明有 环 的存在，那就说明这组数据信息冲突</strong><br><strong>处理到最后队列里面数据大于1说明信息不足</strong><br><strong>比如1&lt;2,1&lt;3;最后队列里面数组大于1。</strong><br>活不多说直接看代码吧！多看几遍应该就没问题了！</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> in<span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存节点的入度 </span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于并查集的查找 </span><span class="token keyword">struct</span> pe<span class="token punctuation">{</span>    <span class="token keyword">int</span> ma<span class="token punctuation">,</span>mi<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ma>mi说明又ma指向mi的所以 ，ma为前端 ， mi为后端；</span><span class="token punctuation">}</span>p<span class="token punctuation">[</span><span class="token number">20009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>cut<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存图，节约空间 </span><span class="token comment" spellcheck="true">//**********find函数 并查集的查找****************** </span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x<span class="token operator">=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token operator">&amp;&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将入度为零的节点存进队列中开始查找 </span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//说明还有至少两个点的入度为0，这两个节点是无法比较的，同为最底层； </span>        flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        cut<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出一个节点 所以 cut减一； </span>        <span class="token keyword">int</span> x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> y<span class="token operator">=</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到 该节点所连的后端 </span>            in<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使其入度数减一 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// q.push(y); 若为空节点就存入队列然后找他的后端。 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cut<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"CONFLICT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还有节点存在说明存在  环   这数据冲突。 </span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"UNCERTAIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列里面还有数据  则数据信息不足。 </span>    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cut<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %c %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//***********cut表示有多少个不是相等的节点，用于下面第一次查找矛盾*********            </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                p<span class="token punctuation">[</span>cut<span class="token punctuation">]</span><span class="token punctuation">.</span>ma <span class="token operator">=</span>a<span class="token punctuation">;</span>                p<span class="token punctuation">[</span>cut<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span>b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                p<span class="token punctuation">[</span>cut<span class="token punctuation">]</span><span class="token punctuation">.</span>ma <span class="token operator">=</span>b<span class="token punctuation">;</span>                p<span class="token punctuation">[</span>cut<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token operator">=</span>a<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//**********将相同的节点化为一个！            </span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>y<span class="token punctuation">)</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cut<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ma <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mi <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//*********说明给数据已经冲突不用再执行其他的了 </span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构建CAD图 </span>                in<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加节点的入度 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"CONFLICT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cut<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span> cut<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找出还有多少个等于自己的节点，也就是还有多少个  节点  的信息不确定，</span>        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 其中包含 可能成环的节点。 </span>        <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HDU </category>
          
          <category> 拓扑排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑排序 </tag>
            
            <tag> HDU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/21/hello-world/"/>
      <url>/2019/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
