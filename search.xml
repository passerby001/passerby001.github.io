<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HPU第一次积分赛 E.Max Gcd</title>
      <link href="/2019/07/22/HPU%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%A7%AF%E5%88%86%E8%B5%9B%20E.Max%20Gcd/"/>
      <url>/2019/07/22/HPU%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%A7%AF%E5%88%86%E8%B5%9B%20E.Max%20Gcd/</url>
      
        <content type="html"><![CDATA[<p>E. Max Gcd</p><blockquote><p>单点时限: 2.0 sec<br>内存限制: 512 MB</p></blockquote><blockquote><p>一个数组a，现在你需要删除某一项使得它们的gcd最大，求出这个最大值。</p></blockquote><blockquote><p><strong>输入格式</strong><br>第一行输入一个正整数n，表示数组的大小，接下来一行n个数，第i个数为ai。(2≤n≤105,1≤ai≤109)</p></blockquote><blockquote><p><strong>输出格式</strong><br>输出删除掉某个数以后的gcd的最大值。</p></blockquote><blockquote><p><strong>样例</strong></p></blockquote><blockquote><p>input<br>4<br>2 4 8 1<br>outpu|<br>2</p></blockquote><blockquote><p>input<br>4<br>1 2 3 4</p></blockquote><blockquote><p>output<br>1</p></blockquote><p><strong>提示</strong><br>样例一：删除第四个元素后，2,4,8的最大公因子为2。<br>样例二：无论删除哪一个，最大公因子都为1。</p><p>这个题刚开始想着直接暴力，后来发现时间不允许就放弃了，赛后我是师父说直接先把数组从前到后依次gcd存在一个数组里，然后在从后向前依次gcd再放另一个数组里，然后在直接暴力就行了！<br><img src="https://img-blog.csdnimg.cn/20190720181632611.png" alt="不会使用作图工具大佬们见谅"><br>红线代表从前向后依次gcd，蓝线是从后向前。然后一个一个去除保留最大的数据就行！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100100</span>],b[<span class="number">100100</span>],c[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[<span class="number">1</span>];</span><br><span class="line">b[<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">b[i]=__gcd(b[i<span class="number">-1</span>],a[i]);<span class="comment">//从前向后依次gcd</span></span><br><span class="line">&#125;</span><br><span class="line">c[n]=a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=__gcd(c[i+<span class="number">1</span>],a[i]);<span class="comment">//从后向前依次gcd</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxn=max(b[n<span class="number">-1</span>],c[<span class="number">2</span>]);<span class="comment">//因为防止数组下标越界所以事先比较去掉第一项和</span></span><br><span class="line"><span class="comment">//去掉最后一项哪个大，保留打的一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//b[i-1]和c[i+1]刚好是第i项之前的所有项的gcd和第i项之后的所有项的gcd</span></span><br><span class="line">maxn=max(__gcd(b[i<span class="number">-1</span>],c[i+<span class="number">1</span>]),maxn);</span><br><span class="line"><span class="comment">//因为一直保留的是最大的值，所以最后的maxn就是答案</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxn&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HPU第一次积分赛 </category>
          
          <category> Gcd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HPU第一次积分赛 </tag>
            
            <tag> Gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU-1811-Rank of Tetris</title>
      <link href="/2019/07/22/HDU-1811-Rank%20of%20Tetris/"/>
      <url>/2019/07/22/HDU-1811-Rank%20of%20Tetris/</url>
      
        <content type="html"><![CDATA[<p>#HDU-1811-Rank of Tetris<br><strong>HDU-1811-Rank of Tetris</strong></p><blockquote><p>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p></blockquote><blockquote><p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p></blockquote><blockquote><p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。<br>同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p></blockquote><blockquote><p>现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出”OK”。否则就请你判断出错的原因，到底是因为信息不完全（输出”UNCERTAIN”），还是因为这些信息中包含冲突（输出”CONFLICT”）。<br>注意，如果信息中同时包含冲突且信息不完全，就输出”CONFLICT”。</p></blockquote><blockquote><p>本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含两个整数N,M(0&lt;=N&lt;=10000,0&lt;=M&lt;=20000),分别表示要排名的人数以及得到的关系数。<br>接下来有M行，分别表示这些关系</p></blockquote><blockquote><p>对于每组测试，在一行里按题目要求输出</p></blockquote><blockquote><p>Sample Input</p></blockquote><blockquote><p>3 3<br>0 &gt; 1<br>1 &lt; 2<br>0 &gt; 2<br>4 4<br>1 = 2<br>1 &gt; 3<br>2 &gt; 0<br>0 &gt; 1<br>3 3<br>1 &gt; 0<br>1 &gt; 2<br>2 &lt; 1</p></blockquote><blockquote><p>Sample Output</p></blockquote><blockquote><p>OK<br>CONFLICT<br>UNCERTAIN</p></blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1811" target="_blank">题目链接</a><br>&#8195;今天刚学了拓扑排序，之前写了<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1285" target="_blank">HDU-1285</a>感觉还可以，到那时一遇到这个题就蒙圈了，想了好久（找了好多大佬的博客才搞懂），<br>&#8195;这个题关键是如何处理节点的边；因为直接建图的话数据太大所以我们需要用vector来存图，如果遇到等号我们就用并查集处理成一个单元，然后&gt;或&lt;就分别设为vector的前端后后端。再结合队列进行节点的删减；<br><em>注意</em><br><strong>当处理到最后还有节点未处理说明有 环 的存在，那就说明这组数据信息冲突</strong><br><strong>处理到最后队列里面数据大于1说明信息不足</strong><br><strong>比如1&lt;2,1&lt;3;最后队列里面数组大于1。</strong><br>活不多说直接看代码吧！多看几遍应该就没问题了！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> in[<span class="number">10009</span>];<span class="comment">//存节点的入度 </span></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">10009</span>];<span class="comment">//用于并查集的查找 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pe</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ma,mi;<span class="comment">//ma&gt;mi说明又ma指向mi的所以 ，ma为前端 ， mi为后端；</span></span><br><span class="line">&#125;p[<span class="number">20009</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,cut;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v[<span class="number">10009</span>];<span class="comment">//用于存图，节约空间 </span></span><br><span class="line"><span class="comment">//**********find函数 并查集的查找****************** </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(fa[x]!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        x=fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(find(i)==i&amp;&amp;in[i]==<span class="number">0</span>)<span class="comment">//将入度为零的节点存进队列中开始查找 </span></span><br><span class="line">        q.push(i); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q.size()&gt;<span class="number">1</span>)<span class="comment">//说明还有至少两个点的入度为0，这两个节点是无法比较的，同为最底层； </span></span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        cut--;<span class="comment">//找出一个节点 所以 cut减一； </span></span><br><span class="line">        <span class="keyword">int</span> x=q.front();</span><br><span class="line">        q.pop() ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size() ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y=v[x][i];<span class="comment">//找到 该节点所连的后端 </span></span><br><span class="line">            in[y]--;<span class="comment">//使其入度数减一 </span></span><br><span class="line">            <span class="keyword">if</span>(!in[y])<span class="comment">// q.push(y); 若为空节点就存入队列然后找他的后端。 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cut) <span class="built_in">puts</span>(<span class="string">"CONFLICT"</span>);<span class="comment">//还有节点存在说明存在  环   这数据冲突。 </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">"UNCERTAIN"</span>);<span class="comment">//队列里面还有数据  则数据信息不足。 </span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"OK"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v[i].clear() ;</span><br><span class="line">            fa[i]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        cut=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %c %d"</span>,&amp;a,&amp;c,&amp;b);</span><br><span class="line"><span class="comment">//***********cut表示有多少个不是相等的节点，用于下面第一次查找矛盾*********            </span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'&gt;'</span>)&#123;</span><br><span class="line">                p[cut].ma =a;</span><br><span class="line">                p[cut++].mi =b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'&lt;'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p[cut].ma =b;</span><br><span class="line">                p[cut++].mi =a;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//**********将相同的节点化为一个！            </span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> x=find(a);</span><br><span class="line">                <span class="keyword">int</span> y=find(b);</span><br><span class="line">                <span class="keyword">if</span>(x!=y) fa[x]=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cut;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=find(p[i].ma );</span><br><span class="line">            <span class="keyword">int</span> y=find(p[i].mi );</span><br><span class="line">            <span class="keyword">if</span>(x==y)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;<span class="comment">//*********说明给数据已经冲突不用再执行其他的了 </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                v[x].push_back(y);<span class="comment">//构建CAD图 </span></span><br><span class="line">                in[y]++;<span class="comment">//增加节点的入度 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"CONFLICT"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cut=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(find(i)==i) cut++;<span class="comment">//找出还有多少个等于自己的节点，也就是还有多少个  节点  的信息不确定，</span></span><br><span class="line">        &#125;<span class="comment">// 其中包含 可能成环的节点。 </span></span><br><span class="line">        top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HDU </category>
          
          <category> 拓扑排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDU </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/21/hello-world/"/>
      <url>/2019/07/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
